{
  "stats": {
    "suites": 6,
    "tests": 68,
    "passes": 57,
    "pending": 0,
    "failures": 11,
    "start": "2017-05-05T17:26:08.332Z",
    "end": "2017-05-05T17:27:02.975Z",
    "duration": 54643,
    "testsRegistered": 68,
    "passPercent": 83.8,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Ecosystems, Environments, Devices, and Zones",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
            "timedOut": false,
            "duration": 528,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "80925e2b-c08d-40ee-b029-741963465f4c",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the ecosystem exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
            "timedOut": false,
            "duration": 320,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "96edc1ec-158b-4b0c-9319-fa160ac0547c",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6504d90b-a46a-45ff-8703-37a04c32279b",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the environment exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "89f1761e-edb1-4038-af56-1493e7bc555e",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6d1942fb-c1dd-4098-9f1e-a56518e0e1a3",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the device exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bdf3cc60-1d10-4009-afce-1ad3fd7f6c25",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Set a service property on a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "233b4046-137b-4008-b47e-0a28888483f4",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the property value has changed",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
            "timedOut": false,
            "duration": 523,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0ae0b0c7-2e27-4f5c-b23c-2d2da00a0263",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Update the device record",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
            "timedOut": false,
            "duration": 293,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "665faa52-f42f-46f2-8f72-af95846fea28",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the record has been updated",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
            "timedOut": false,
            "duration": 377,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "010e644c-568e-4c08-a721-1c846f8639a3",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create and add a second device to the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0767930d-3c42-4f0e-97ca-52057295aa98",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Set a service property on the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "18e0c60b-0e4d-464a-b681-ca58e5f4be48",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the property has been set on both devices",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
            "timedOut": false,
            "duration": 698,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9dc11796-5bfb-460e-965c-31e7bd3941a1",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create a third device in the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
            "timedOut": false,
            "duration": 300,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d582a729-96af-4291-a126-26c194c36544",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
            "timedOut": false,
            "duration": 287,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4d9b0988-ac10-4017-9203-2aae4f648bab",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the zone exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3415da83-c31f-4626-b280-ab49f2cd4eb1",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone, add the second device to the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
            "timedOut": false,
            "duration": 330,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fe08c1e6-d9a5-48b4-96d2-3719804e1240",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that both devices and no others are in the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "41688059-2043-4d73-9dfc-e105079b5418",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Set a service property on the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
            "timedOut": false,
            "duration": 375,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8bbb083a-68b7-40fc-9732-17cc26f6c6ed",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that device 1 and 2 have the property set, but not device 3",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9cda9f91-27dc-4002-b5a5-ef34fb799ce2",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "f2300a77-843a-4785-a99a-75194c8f50ca",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
            "timedOut": false,
            "duration": 528,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "80925e2b-c08d-40ee-b029-741963465f4c",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the ecosystem exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
            "timedOut": false,
            "duration": 320,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "96edc1ec-158b-4b0c-9319-fa160ac0547c",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6504d90b-a46a-45ff-8703-37a04c32279b",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the environment exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "89f1761e-edb1-4038-af56-1493e7bc555e",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
            "timedOut": false,
            "duration": 451,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6d1942fb-c1dd-4098-9f1e-a56518e0e1a3",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the device exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bdf3cc60-1d10-4009-afce-1ad3fd7f6c25",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Set a service property on a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "233b4046-137b-4008-b47e-0a28888483f4",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the property value has changed",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
            "timedOut": false,
            "duration": 523,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0ae0b0c7-2e27-4f5c-b23c-2d2da00a0263",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Update the device record",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
            "timedOut": false,
            "duration": 293,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "665faa52-f42f-46f2-8f72-af95846fea28",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the record has been updated",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
            "timedOut": false,
            "duration": 377,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "010e644c-568e-4c08-a721-1c846f8639a3",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create and add a second device to the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0767930d-3c42-4f0e-97ca-52057295aa98",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Set a service property on the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "18e0c60b-0e4d-464a-b681-ca58e5f4be48",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the property has been set on both devices",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
            "timedOut": false,
            "duration": 698,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9dc11796-5bfb-460e-965c-31e7bd3941a1",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create a third device in the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
            "timedOut": false,
            "duration": 300,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d582a729-96af-4291-a126-26c194c36544",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
            "timedOut": false,
            "duration": 287,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4d9b0988-ac10-4017-9203-2aae4f648bab",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that the zone exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3415da83-c31f-4626-b280-ab49f2cd4eb1",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone, add the second device to the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
            "timedOut": false,
            "duration": 330,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fe08c1e6-d9a5-48b4-96d2-3719804e1240",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that both devices and no others are in the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "41688059-2043-4d73-9dfc-e105079b5418",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Set a service property on the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
            "timedOut": false,
            "duration": 375,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8bbb083a-68b7-40fc-9732-17cc26f6c6ed",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          },
          {
            "title": "Verify that device 1 and 2 have the property set, but not device 3",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9cda9f91-27dc-4002-b5a5-ef34fb799ce2",
            "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 20,
        "totalPasses": 20,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6890,
        "rootEmpty": false
      },
      {
        "title": "Edge Device, Websockets, and Webhooks",
        "suites": [],
        "tests": [
          {
            "title": "Setup webhook",
            "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
            "timedOut": false,
            "duration": 370,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "00825e24-21c0-4c56-a479-79ef63750757",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Verify webhook is valid",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
            "timedOut": false,
            "duration": 742,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3f1cfed7-9111-4370-89ee-19e65f7bfdf2",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Get the environment from the running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b44d62d0-2572-4000-ab4f-24bf3baa943f",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Identify devices that have been created by running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b3de90ed-353c-4efb-8f8a-7c1346515261",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Set a property on a device",
            "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "508a47b1-213f-4358-a598-519bfa6049c0",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = false",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
            "timedOut": false,
            "duration": 384,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c365f759-80ee-4d52-a78f-b54c9fc9977a",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = true",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
            "timedOut": true,
            "duration": 10001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
            },
            "isRoot": false,
            "uuid": "7a276867-ba7b-4c6b-a525-70b0d8f8cc58",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Test set and changed messages",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
            "timedOut": false,
            "duration": 5044,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "f1da6805-4a26-4f57-96be-42b65617b530",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Test service methods and events",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
            "timedOut": false,
            "duration": 5004,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "8366f12d-91c3-43c5-ab21-2a3465984291",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Setup webhook",
            "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
            "timedOut": false,
            "duration": 370,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "00825e24-21c0-4c56-a479-79ef63750757",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Verify webhook is valid",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
            "timedOut": false,
            "duration": 742,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3f1cfed7-9111-4370-89ee-19e65f7bfdf2",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Get the environment from the running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b44d62d0-2572-4000-ab4f-24bf3baa943f",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Identify devices that have been created by running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b3de90ed-353c-4efb-8f8a-7c1346515261",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Set a property on a device",
            "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "508a47b1-213f-4358-a598-519bfa6049c0",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = false",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
            "timedOut": false,
            "duration": 384,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c365f759-80ee-4d52-a78f-b54c9fc9977a",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Test set and changed messages",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
            "timedOut": false,
            "duration": 5044,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "f1da6805-4a26-4f57-96be-42b65617b530",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          },
          {
            "title": "Test service methods and events",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
            "timedOut": false,
            "duration": 5004,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "8366f12d-91c3-43c5-ab21-2a3465984291",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Verify the property has been set using refresh = true",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
            "timedOut": true,
            "duration": 10001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
            },
            "isRoot": false,
            "uuid": "7a276867-ba7b-4c6b-a525-70b0d8f8cc58",
            "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 8,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 22363,
        "rootEmpty": false
      },
      {
        "title": "History",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "History Create an ecosystem",
            "timedOut": false,
            "duration": 422,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f0e13910-203a-4187-aaf8-da994c1b6362",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "History Create an environment",
            "timedOut": false,
            "duration": 334,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0b4713a2-af9f-48c3-98aa-05ff7ce3bbfc",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "History Create a virtual device",
            "timedOut": false,
            "duration": 1864,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d5577fe2-d100-4d6d-b5a7-d045e491ff43",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fabbb829-170c-40ed-b9ed-e30c27bb50ce",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 257,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8753fcb9-6e3e-4475-b11e-32d4ad9a452a",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Call a service method on the device",
            "fullTitle": "History Call a service method on the device",
            "timedOut": false,
            "duration": 1342,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3c51f078-e637-449a-abce-8b28f5fd10e5",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Verify device history is correct",
            "fullTitle": "History Verify device history is correct",
            "timedOut": false,
            "duration": 325,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "06dbaec1-15eb-4bde-baea-82119b7fb5fa",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Verify environment history is correct",
            "fullTitle": "History Verify environment history is correct",
            "timedOut": false,
            "duration": 392,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6eb3d2f6-cda4-4b6a-9ecb-8a6073178a12",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "History Create an ecosystem",
            "timedOut": false,
            "duration": 422,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f0e13910-203a-4187-aaf8-da994c1b6362",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "History Create an environment",
            "timedOut": false,
            "duration": 334,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0b4713a2-af9f-48c3-98aa-05ff7ce3bbfc",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "History Create a virtual device",
            "timedOut": false,
            "duration": 1864,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d5577fe2-d100-4d6d-b5a7-d045e491ff43",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fabbb829-170c-40ed-b9ed-e30c27bb50ce",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 257,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8753fcb9-6e3e-4475-b11e-32d4ad9a452a",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Call a service method on the device",
            "fullTitle": "History Call a service method on the device",
            "timedOut": false,
            "duration": 1342,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3c51f078-e637-449a-abce-8b28f5fd10e5",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Verify device history is correct",
            "fullTitle": "History Verify device history is correct",
            "timedOut": false,
            "duration": 325,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "06dbaec1-15eb-4bde-baea-82119b7fb5fa",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          },
          {
            "title": "Verify environment history is correct",
            "fullTitle": "History Verify environment history is correct",
            "timedOut": false,
            "duration": 392,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6eb3d2f6-cda4-4b6a-9ecb-8a6073178a12",
            "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5205,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Users Create an ecosystem",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "97ba3e6c-10df-41d1-8a07-257cabe94737",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Users Create an environment",
            "timedOut": false,
            "duration": 272,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "65493661-0b7e-4485-bdbd-0ec43a4161bc",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create another environment",
            "fullTitle": "Users Create another environment",
            "timedOut": false,
            "duration": 380,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a78462eb-6b65-46cc-a35a-4b15675c53a3",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the first environment",
            "fullTitle": "Users Create a virtual device in the first environment",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f76391fa-1242-4d7b-98d7-b49d597cb8ec",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the second environment",
            "fullTitle": "Users Create a virtual device in the second environment",
            "timedOut": false,
            "duration": 294,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e2f9e875-cd39-4ec6-b5d5-2a137ed0c289",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a user and grant access to the first environment",
            "fullTitle": "Users Create a user and grant access to the first environment",
            "timedOut": false,
            "duration": 1057,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7d60bdcf-9d7f-4efe-81a7-8f10f0ca3ec4",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to list ecosystems",
            "fullTitle": "Users Fail to list ecosystems",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "190650a7-70a3-4281-b63a-579c8a47a2c3",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "List environments",
            "fullTitle": "Users List environments",
            "timedOut": false,
            "duration": 256,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 500 to equal 200",
              "showDiff": true,
              "actual": "500",
              "expected": "200",
              "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 500\n+ 200\n",
              "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "61f5f686-d3cc-48e1-b4ce-de978255a3b4",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "List devices",
            "fullTitle": "Users List devices",
            "timedOut": false,
            "duration": 254,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "c6de8e3a-78c6-4d47-9d21-2892a5522290",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to list devices in the second environment",
            "fullTitle": "Users Fail to list devices in the second environment",
            "timedOut": false,
            "duration": 365,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected null to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": null,
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "4dd6be63-2961-463e-8226-0867afd0ad0b",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Set device service property",
            "fullTitle": "Users Set device service property",
            "timedOut": false,
            "duration": 433,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "d87f527f-b062-42f7-9fdc-952d7f860528",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Update device record",
            "fullTitle": "Users Update device record",
            "timedOut": false,
            "duration": 267,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "ca02a92d-cb2a-423c-8569-721c7756af22",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Users Create a zone",
            "timedOut": false,
            "duration": 333,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 201",
              "showDiff": true,
              "actual": "403",
              "expected": "201",
              "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 201\n",
              "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "951c6118-d213-4f3c-b0ce-e00b77018966",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone",
            "fullTitle": "Users Add the first device to the zone",
            "timedOut": false,
            "duration": 243,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 400 to equal 201",
              "showDiff": true,
              "actual": "400",
              "expected": "201",
              "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 201\n",
              "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "240282f4-65a2-4e69-8205-4008c152119e",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to add the second device to the zone",
            "fullTitle": "Users Fail to add the second device to the zone",
            "timedOut": false,
            "duration": 259,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": {
                "errorType": "InvalidParams",
                "errors": [
                  {
                    "in": "path",
                    "message": "invalid id",
                    "path": "id"
                  }
                ]
              },
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "87082ccd-bfeb-4b4b-88c2-9e0d3039c0cb",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to delete the ecosystem",
            "fullTitle": "Users Fail to delete the ecosystem",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4c1b63aa-ffcf-4876-a5ea-1cd274aa6dd9",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Delete the first device",
            "fullTitle": "Users Delete the first device",
            "timedOut": false,
            "duration": 297,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "8d7df625-a4d0-4fa7-88ab-f8d60d36f736",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Delete the first environment",
            "fullTitle": "Users Delete the first environment",
            "timedOut": false,
            "duration": 277,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "95612f7a-a4b7-4017-a865-7ef697cbe033",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Users Create an ecosystem",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "97ba3e6c-10df-41d1-8a07-257cabe94737",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Users Create an environment",
            "timedOut": false,
            "duration": 272,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "65493661-0b7e-4485-bdbd-0ec43a4161bc",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create another environment",
            "fullTitle": "Users Create another environment",
            "timedOut": false,
            "duration": 380,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a78462eb-6b65-46cc-a35a-4b15675c53a3",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the first environment",
            "fullTitle": "Users Create a virtual device in the first environment",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f76391fa-1242-4d7b-98d7-b49d597cb8ec",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the second environment",
            "fullTitle": "Users Create a virtual device in the second environment",
            "timedOut": false,
            "duration": 294,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e2f9e875-cd39-4ec6-b5d5-2a137ed0c289",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a user and grant access to the first environment",
            "fullTitle": "Users Create a user and grant access to the first environment",
            "timedOut": false,
            "duration": 1057,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7d60bdcf-9d7f-4efe-81a7-8f10f0ca3ec4",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to list ecosystems",
            "fullTitle": "Users Fail to list ecosystems",
            "timedOut": false,
            "duration": 256,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "190650a7-70a3-4281-b63a-579c8a47a2c3",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to delete the ecosystem",
            "fullTitle": "Users Fail to delete the ecosystem",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4c1b63aa-ffcf-4876-a5ea-1cd274aa6dd9",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "List environments",
            "fullTitle": "Users List environments",
            "timedOut": false,
            "duration": 256,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 500 to equal 200",
              "showDiff": true,
              "actual": "500",
              "expected": "200",
              "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 500\n+ 200\n",
              "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "61f5f686-d3cc-48e1-b4ce-de978255a3b4",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "List devices",
            "fullTitle": "Users List devices",
            "timedOut": false,
            "duration": 254,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "c6de8e3a-78c6-4d47-9d21-2892a5522290",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to list devices in the second environment",
            "fullTitle": "Users Fail to list devices in the second environment",
            "timedOut": false,
            "duration": 365,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected null to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": null,
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "4dd6be63-2961-463e-8226-0867afd0ad0b",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Set device service property",
            "fullTitle": "Users Set device service property",
            "timedOut": false,
            "duration": 433,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "d87f527f-b062-42f7-9fdc-952d7f860528",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Update device record",
            "fullTitle": "Users Update device record",
            "timedOut": false,
            "duration": 267,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "ca02a92d-cb2a-423c-8569-721c7756af22",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Users Create a zone",
            "timedOut": false,
            "duration": 333,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 201",
              "showDiff": true,
              "actual": "403",
              "expected": "201",
              "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 201\n",
              "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "951c6118-d213-4f3c-b0ce-e00b77018966",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone",
            "fullTitle": "Users Add the first device to the zone",
            "timedOut": false,
            "duration": 243,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 400 to equal 201",
              "showDiff": true,
              "actual": "400",
              "expected": "201",
              "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 201\n",
              "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "240282f4-65a2-4e69-8205-4008c152119e",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Fail to add the second device to the zone",
            "fullTitle": "Users Fail to add the second device to the zone",
            "timedOut": false,
            "duration": 259,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": {
                "errorType": "InvalidParams",
                "errors": [
                  {
                    "in": "path",
                    "message": "invalid id",
                    "path": "id"
                  }
                ]
              },
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "87082ccd-bfeb-4b4b-88c2-9e0d3039c0cb",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Delete the first device",
            "fullTitle": "Users Delete the first device",
            "timedOut": false,
            "duration": 297,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "8d7df625-a4d0-4fa7-88ab-f8d60d36f736",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          },
          {
            "title": "Delete the first environment",
            "fullTitle": "Users Delete the first environment",
            "timedOut": false,
            "duration": 277,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "95612f7a-a4b7-4017-a865-7ef697cbe033",
            "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 8,
        "totalFailures": 10,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6089,
        "rootEmpty": false
      },
      {
        "title": "Clients",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Clients Create an ecosystem",
            "timedOut": false,
            "duration": 326,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "16e55700-14fd-412c-a7d5-57e064c67b82",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Create a client",
            "fullTitle": "Clients Create a client",
            "timedOut": false,
            "duration": 273,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3b1b0d45-4887-4f21-a9e5-596628cce249",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the client exists",
            "fullTitle": "Clients Verify the client exists",
            "timedOut": false,
            "duration": 318,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f56b00c3-a769-43e6-9799-a6e9eaa948bc",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Update the client info",
            "fullTitle": "Clients Update the client info",
            "timedOut": false,
            "duration": 718,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "27127f2e-6c53-4cfe-822b-4c7ff4898ad7",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the client info has been updated",
            "fullTitle": "Clients Verify the client info has been updated",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "28150eb2-8aad-4a49-9ac1-df31d7d11ea3",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Create a client token",
            "fullTitle": "Clients Create a client token",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "13a91038-6b29-48dc-bb30-aabfdb1f404e",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the token exists",
            "fullTitle": "Clients Verify the token exists",
            "timedOut": false,
            "duration": 634,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fc1f3168-5ce8-4e02-91e6-8d98c97fd8d7",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Update the token record",
            "fullTitle": "Clients Update the token record",
            "timedOut": false,
            "duration": 340,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "37907b1f-0f0d-4e7c-ba43-0486e4eb126c",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the token record has been updated",
            "fullTitle": "Clients Verify the token record has been updated",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dffd576a-4734-40db-8814-df16c30f7a18",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Regenerate the client token and verify it is different",
            "fullTitle": "Clients Regenerate the client token and verify it is different",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "23caa1e8-d03f-492c-a58b-2ed0c7f03352",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Clients Create an ecosystem",
            "timedOut": false,
            "duration": 326,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "16e55700-14fd-412c-a7d5-57e064c67b82",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Create a client",
            "fullTitle": "Clients Create a client",
            "timedOut": false,
            "duration": 273,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3b1b0d45-4887-4f21-a9e5-596628cce249",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the client exists",
            "fullTitle": "Clients Verify the client exists",
            "timedOut": false,
            "duration": 318,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f56b00c3-a769-43e6-9799-a6e9eaa948bc",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Update the client info",
            "fullTitle": "Clients Update the client info",
            "timedOut": false,
            "duration": 718,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "27127f2e-6c53-4cfe-822b-4c7ff4898ad7",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the client info has been updated",
            "fullTitle": "Clients Verify the client info has been updated",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "28150eb2-8aad-4a49-9ac1-df31d7d11ea3",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Create a client token",
            "fullTitle": "Clients Create a client token",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "13a91038-6b29-48dc-bb30-aabfdb1f404e",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the token exists",
            "fullTitle": "Clients Verify the token exists",
            "timedOut": false,
            "duration": 634,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fc1f3168-5ce8-4e02-91e6-8d98c97fd8d7",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Update the token record",
            "fullTitle": "Clients Update the token record",
            "timedOut": false,
            "duration": 340,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "37907b1f-0f0d-4e7c-ba43-0486e4eb126c",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Verify the token record has been updated",
            "fullTitle": "Clients Verify the token record has been updated",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dffd576a-4734-40db-8814-df16c30f7a18",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          },
          {
            "title": "Regenerate the client token and verify it is different",
            "fullTitle": "Clients Regenerate the client token and verify it is different",
            "timedOut": false,
            "duration": 260,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "23caa1e8-d03f-492c-a58b-2ed0c7f03352",
            "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3656,
        "rootEmpty": false
      },
      {
        "title": "Service classes",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Service classes Create an ecosystem",
            "timedOut": false,
            "duration": 313,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cb8d7427-31e7-4051-b202-3b1244b0a084",
            "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
            "skipped": false
          },
          {
            "title": "Create a new service class",
            "fullTitle": "Service classes Create a new service class",
            "timedOut": false,
            "duration": 273,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "47b5fe30-32f2-418e-8763-31cf1c81f188",
            "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
            "skipped": false
          },
          {
            "title": "Verify the service class exists",
            "fullTitle": "Service classes Verify the service class exists",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1edb8db8-6031-49fd-8e61-3a1b8fc44669",
            "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Service classes Create an ecosystem",
            "timedOut": false,
            "duration": 313,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cb8d7427-31e7-4051-b202-3b1244b0a084",
            "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
            "skipped": false
          },
          {
            "title": "Create a new service class",
            "fullTitle": "Service classes Create a new service class",
            "timedOut": false,
            "duration": 273,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "47b5fe30-32f2-418e-8763-31cf1c81f188",
            "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
            "skipped": false
          },
          {
            "title": "Verify the service class exists",
            "fullTitle": "Service classes Verify the service class exists",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1edb8db8-6031-49fd-8e61-3a1b8fc44669",
            "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 839,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "3694123a-5914-43a2-affe-de92275fb5b0",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Create an ecosystem",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
      "timedOut": false,
      "duration": 528,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "80925e2b-c08d-40ee-b029-741963465f4c",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the ecosystem exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
      "timedOut": false,
      "duration": 320,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "96edc1ec-158b-4b0c-9319-fa160ac0547c",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
      "timedOut": false,
      "duration": 280,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6504d90b-a46a-45ff-8703-37a04c32279b",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the environment exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "89f1761e-edb1-4038-af56-1493e7bc555e",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6d1942fb-c1dd-4098-9f1e-a56518e0e1a3",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the device exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
      "timedOut": false,
      "duration": 259,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bdf3cc60-1d10-4009-afce-1ad3fd7f6c25",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Set a service property on a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "233b4046-137b-4008-b47e-0a28888483f4",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the property value has changed",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
      "timedOut": false,
      "duration": 523,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0ae0b0c7-2e27-4f5c-b23c-2d2da00a0263",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Update the device record",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
      "timedOut": false,
      "duration": 293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "665faa52-f42f-46f2-8f72-af95846fea28",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the record has been updated",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
      "timedOut": false,
      "duration": 377,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "010e644c-568e-4c08-a721-1c846f8639a3",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create and add a second device to the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0767930d-3c42-4f0e-97ca-52057295aa98",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Set a service property on the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "18e0c60b-0e4d-464a-b681-ca58e5f4be48",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the property has been set on both devices",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
      "timedOut": false,
      "duration": 698,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9dc11796-5bfb-460e-965c-31e7bd3941a1",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create a third device in the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
      "timedOut": false,
      "duration": 300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d582a729-96af-4291-a126-26c194c36544",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
      "timedOut": false,
      "duration": 287,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4d9b0988-ac10-4017-9203-2aae4f648bab",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the zone exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3415da83-c31f-4626-b280-ab49f2cd4eb1",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone, add the second device to the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
      "timedOut": false,
      "duration": 330,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe08c1e6-d9a5-48b4-96d2-3719804e1240",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that both devices and no others are in the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "41688059-2043-4d73-9dfc-e105079b5418",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Set a service property on the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
      "timedOut": false,
      "duration": 375,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8bbb083a-68b7-40fc-9732-17cc26f6c6ed",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that device 1 and 2 have the property set, but not device 3",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9cda9f91-27dc-4002-b5a5-ef34fb799ce2",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Setup webhook",
      "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
      "timedOut": false,
      "duration": 370,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "00825e24-21c0-4c56-a479-79ef63750757",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Verify webhook is valid",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
      "timedOut": false,
      "duration": 742,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3f1cfed7-9111-4370-89ee-19e65f7bfdf2",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Get the environment from the running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b44d62d0-2572-4000-ab4f-24bf3baa943f",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Identify devices that have been created by running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b3de90ed-353c-4efb-8f8a-7c1346515261",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Set a property on a device",
      "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "508a47b1-213f-4358-a598-519bfa6049c0",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = false",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
      "timedOut": false,
      "duration": 384,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c365f759-80ee-4d52-a78f-b54c9fc9977a",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = true",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
      "timedOut": true,
      "duration": 10001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "7a276867-ba7b-4c6b-a525-70b0d8f8cc58",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Test set and changed messages",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
      "timedOut": false,
      "duration": 5044,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "f1da6805-4a26-4f57-96be-42b65617b530",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Test service methods and events",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "8366f12d-91c3-43c5-ab21-2a3465984291",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "History Create an ecosystem",
      "timedOut": false,
      "duration": 422,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f0e13910-203a-4187-aaf8-da994c1b6362",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "History Create an environment",
      "timedOut": false,
      "duration": 334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0b4713a2-af9f-48c3-98aa-05ff7ce3bbfc",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "History Create a virtual device",
      "timedOut": false,
      "duration": 1864,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d5577fe2-d100-4d6d-b5a7-d045e491ff43",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fabbb829-170c-40ed-b9ed-e30c27bb50ce",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 257,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8753fcb9-6e3e-4475-b11e-32d4ad9a452a",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Call a service method on the device",
      "fullTitle": "History Call a service method on the device",
      "timedOut": false,
      "duration": 1342,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3c51f078-e637-449a-abce-8b28f5fd10e5",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Verify device history is correct",
      "fullTitle": "History Verify device history is correct",
      "timedOut": false,
      "duration": 325,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "06dbaec1-15eb-4bde-baea-82119b7fb5fa",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Verify environment history is correct",
      "fullTitle": "History Verify environment history is correct",
      "timedOut": false,
      "duration": 392,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6eb3d2f6-cda4-4b6a-9ecb-8a6073178a12",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Users Create an ecosystem",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "97ba3e6c-10df-41d1-8a07-257cabe94737",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Users Create an environment",
      "timedOut": false,
      "duration": 272,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "65493661-0b7e-4485-bdbd-0ec43a4161bc",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create another environment",
      "fullTitle": "Users Create another environment",
      "timedOut": false,
      "duration": 380,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a78462eb-6b65-46cc-a35a-4b15675c53a3",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the first environment",
      "fullTitle": "Users Create a virtual device in the first environment",
      "timedOut": false,
      "duration": 275,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f76391fa-1242-4d7b-98d7-b49d597cb8ec",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the second environment",
      "fullTitle": "Users Create a virtual device in the second environment",
      "timedOut": false,
      "duration": 294,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e2f9e875-cd39-4ec6-b5d5-2a137ed0c289",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a user and grant access to the first environment",
      "fullTitle": "Users Create a user and grant access to the first environment",
      "timedOut": false,
      "duration": 1057,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7d60bdcf-9d7f-4efe-81a7-8f10f0ca3ec4",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to list ecosystems",
      "fullTitle": "Users Fail to list ecosystems",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "190650a7-70a3-4281-b63a-579c8a47a2c3",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "List environments",
      "fullTitle": "Users List environments",
      "timedOut": false,
      "duration": 256,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 500 to equal 200",
        "showDiff": true,
        "actual": "500",
        "expected": "200",
        "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 500\n+ 200\n",
        "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "61f5f686-d3cc-48e1-b4ce-de978255a3b4",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "List devices",
      "fullTitle": "Users List devices",
      "timedOut": false,
      "duration": 254,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "c6de8e3a-78c6-4d47-9d21-2892a5522290",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to list devices in the second environment",
      "fullTitle": "Users Fail to list devices in the second environment",
      "timedOut": false,
      "duration": 365,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected null to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": null,
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "4dd6be63-2961-463e-8226-0867afd0ad0b",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Set device service property",
      "fullTitle": "Users Set device service property",
      "timedOut": false,
      "duration": 433,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "d87f527f-b062-42f7-9fdc-952d7f860528",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Update device record",
      "fullTitle": "Users Update device record",
      "timedOut": false,
      "duration": 267,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "ca02a92d-cb2a-423c-8569-721c7756af22",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Users Create a zone",
      "timedOut": false,
      "duration": 333,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 201",
        "showDiff": true,
        "actual": "403",
        "expected": "201",
        "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 201\n",
        "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "951c6118-d213-4f3c-b0ce-e00b77018966",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone",
      "fullTitle": "Users Add the first device to the zone",
      "timedOut": false,
      "duration": 243,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 201",
        "showDiff": true,
        "actual": "400",
        "expected": "201",
        "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 201\n",
        "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "240282f4-65a2-4e69-8205-4008c152119e",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to add the second device to the zone",
      "fullTitle": "Users Fail to add the second device to the zone",
      "timedOut": false,
      "duration": 259,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": {
          "errorType": "InvalidParams",
          "errors": [
            {
              "in": "path",
              "message": "invalid id",
              "path": "id"
            }
          ]
        },
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "87082ccd-bfeb-4b4b-88c2-9e0d3039c0cb",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to delete the ecosystem",
      "fullTitle": "Users Fail to delete the ecosystem",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4c1b63aa-ffcf-4876-a5ea-1cd274aa6dd9",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Delete the first device",
      "fullTitle": "Users Delete the first device",
      "timedOut": false,
      "duration": 297,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "8d7df625-a4d0-4fa7-88ab-f8d60d36f736",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Delete the first environment",
      "fullTitle": "Users Delete the first environment",
      "timedOut": false,
      "duration": 277,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "95612f7a-a4b7-4017-a865-7ef697cbe033",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Clients Create an ecosystem",
      "timedOut": false,
      "duration": 326,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "16e55700-14fd-412c-a7d5-57e064c67b82",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Create a client",
      "fullTitle": "Clients Create a client",
      "timedOut": false,
      "duration": 273,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3b1b0d45-4887-4f21-a9e5-596628cce249",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the client exists",
      "fullTitle": "Clients Verify the client exists",
      "timedOut": false,
      "duration": 318,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f56b00c3-a769-43e6-9799-a6e9eaa948bc",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Update the client info",
      "fullTitle": "Clients Update the client info",
      "timedOut": false,
      "duration": 718,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "27127f2e-6c53-4cfe-822b-4c7ff4898ad7",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the client info has been updated",
      "fullTitle": "Clients Verify the client info has been updated",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "28150eb2-8aad-4a49-9ac1-df31d7d11ea3",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Create a client token",
      "fullTitle": "Clients Create a client token",
      "timedOut": false,
      "duration": 267,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "13a91038-6b29-48dc-bb30-aabfdb1f404e",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the token exists",
      "fullTitle": "Clients Verify the token exists",
      "timedOut": false,
      "duration": 634,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fc1f3168-5ce8-4e02-91e6-8d98c97fd8d7",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Update the token record",
      "fullTitle": "Clients Update the token record",
      "timedOut": false,
      "duration": 340,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "37907b1f-0f0d-4e7c-ba43-0486e4eb126c",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the token record has been updated",
      "fullTitle": "Clients Verify the token record has been updated",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dffd576a-4734-40db-8814-df16c30f7a18",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Regenerate the client token and verify it is different",
      "fullTitle": "Clients Regenerate the client token and verify it is different",
      "timedOut": false,
      "duration": 260,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "23caa1e8-d03f-492c-a58b-2ed0c7f03352",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Service classes Create an ecosystem",
      "timedOut": false,
      "duration": 313,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cb8d7427-31e7-4051-b202-3b1244b0a084",
      "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
      "skipped": false
    },
    {
      "title": "Create a new service class",
      "fullTitle": "Service classes Create a new service class",
      "timedOut": false,
      "duration": 273,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "47b5fe30-32f2-418e-8763-31cf1c81f188",
      "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
      "skipped": false
    },
    {
      "title": "Verify the service class exists",
      "fullTitle": "Service classes Verify the service class exists",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1edb8db8-6031-49fd-8e61-3a1b8fc44669",
      "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Create an ecosystem",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
      "timedOut": false,
      "duration": 528,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "80925e2b-c08d-40ee-b029-741963465f4c",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the ecosystem exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
      "timedOut": false,
      "duration": 320,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "96edc1ec-158b-4b0c-9319-fa160ac0547c",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
      "timedOut": false,
      "duration": 280,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6504d90b-a46a-45ff-8703-37a04c32279b",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the environment exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "89f1761e-edb1-4038-af56-1493e7bc555e",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
      "timedOut": false,
      "duration": 451,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6d1942fb-c1dd-4098-9f1e-a56518e0e1a3",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the device exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
      "timedOut": false,
      "duration": 259,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bdf3cc60-1d10-4009-afce-1ad3fd7f6c25",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Set a service property on a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "233b4046-137b-4008-b47e-0a28888483f4",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the property value has changed",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
      "timedOut": false,
      "duration": 523,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0ae0b0c7-2e27-4f5c-b23c-2d2da00a0263",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Update the device record",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
      "timedOut": false,
      "duration": 293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "665faa52-f42f-46f2-8f72-af95846fea28",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the record has been updated",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
      "timedOut": false,
      "duration": 377,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "010e644c-568e-4c08-a721-1c846f8639a3",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create and add a second device to the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0767930d-3c42-4f0e-97ca-52057295aa98",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Set a service property on the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "18e0c60b-0e4d-464a-b681-ca58e5f4be48",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the property has been set on both devices",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
      "timedOut": false,
      "duration": 698,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9dc11796-5bfb-460e-965c-31e7bd3941a1",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create a third device in the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
      "timedOut": false,
      "duration": 300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d582a729-96af-4291-a126-26c194c36544",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
      "timedOut": false,
      "duration": 287,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4d9b0988-ac10-4017-9203-2aae4f648bab",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that the zone exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3415da83-c31f-4626-b280-ab49f2cd4eb1",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone, add the second device to the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
      "timedOut": false,
      "duration": 330,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe08c1e6-d9a5-48b4-96d2-3719804e1240",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that both devices and no others are in the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "41688059-2043-4d73-9dfc-e105079b5418",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Set a service property on the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
      "timedOut": false,
      "duration": 375,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8bbb083a-68b7-40fc-9732-17cc26f6c6ed",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Verify that device 1 and 2 have the property set, but not device 3",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9cda9f91-27dc-4002-b5a5-ef34fb799ce2",
      "parentUUID": "f2300a77-843a-4785-a99a-75194c8f50ca",
      "skipped": false
    },
    {
      "title": "Setup webhook",
      "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
      "timedOut": false,
      "duration": 370,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "00825e24-21c0-4c56-a479-79ef63750757",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Verify webhook is valid",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
      "timedOut": false,
      "duration": 742,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3f1cfed7-9111-4370-89ee-19e65f7bfdf2",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Get the environment from the running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b44d62d0-2572-4000-ab4f-24bf3baa943f",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Identify devices that have been created by running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b3de90ed-353c-4efb-8f8a-7c1346515261",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Set a property on a device",
      "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "508a47b1-213f-4358-a598-519bfa6049c0",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = false",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
      "timedOut": false,
      "duration": 384,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c365f759-80ee-4d52-a78f-b54c9fc9977a",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Test set and changed messages",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
      "timedOut": false,
      "duration": 5044,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "f1da6805-4a26-4f57-96be-42b65617b530",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Test service methods and events",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "8366f12d-91c3-43c5-ab21-2a3465984291",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "History Create an ecosystem",
      "timedOut": false,
      "duration": 422,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f0e13910-203a-4187-aaf8-da994c1b6362",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "History Create an environment",
      "timedOut": false,
      "duration": 334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0b4713a2-af9f-48c3-98aa-05ff7ce3bbfc",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "History Create a virtual device",
      "timedOut": false,
      "duration": 1864,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d5577fe2-d100-4d6d-b5a7-d045e491ff43",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fabbb829-170c-40ed-b9ed-e30c27bb50ce",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 257,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8753fcb9-6e3e-4475-b11e-32d4ad9a452a",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Call a service method on the device",
      "fullTitle": "History Call a service method on the device",
      "timedOut": false,
      "duration": 1342,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3c51f078-e637-449a-abce-8b28f5fd10e5",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Verify device history is correct",
      "fullTitle": "History Verify device history is correct",
      "timedOut": false,
      "duration": 325,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "06dbaec1-15eb-4bde-baea-82119b7fb5fa",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Verify environment history is correct",
      "fullTitle": "History Verify environment history is correct",
      "timedOut": false,
      "duration": 392,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6eb3d2f6-cda4-4b6a-9ecb-8a6073178a12",
      "parentUUID": "4a75e749-d08b-4955-9b71-dd0a2de4669a",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Users Create an ecosystem",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "97ba3e6c-10df-41d1-8a07-257cabe94737",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Users Create an environment",
      "timedOut": false,
      "duration": 272,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "65493661-0b7e-4485-bdbd-0ec43a4161bc",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create another environment",
      "fullTitle": "Users Create another environment",
      "timedOut": false,
      "duration": 380,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a78462eb-6b65-46cc-a35a-4b15675c53a3",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the first environment",
      "fullTitle": "Users Create a virtual device in the first environment",
      "timedOut": false,
      "duration": 275,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f76391fa-1242-4d7b-98d7-b49d597cb8ec",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the second environment",
      "fullTitle": "Users Create a virtual device in the second environment",
      "timedOut": false,
      "duration": 294,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e2f9e875-cd39-4ec6-b5d5-2a137ed0c289",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a user and grant access to the first environment",
      "fullTitle": "Users Create a user and grant access to the first environment",
      "timedOut": false,
      "duration": 1057,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7d60bdcf-9d7f-4efe-81a7-8f10f0ca3ec4",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to list ecosystems",
      "fullTitle": "Users Fail to list ecosystems",
      "timedOut": false,
      "duration": 256,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "190650a7-70a3-4281-b63a-579c8a47a2c3",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to delete the ecosystem",
      "fullTitle": "Users Fail to delete the ecosystem",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4c1b63aa-ffcf-4876-a5ea-1cd274aa6dd9",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Clients Create an ecosystem",
      "timedOut": false,
      "duration": 326,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "16e55700-14fd-412c-a7d5-57e064c67b82",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Create a client",
      "fullTitle": "Clients Create a client",
      "timedOut": false,
      "duration": 273,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3b1b0d45-4887-4f21-a9e5-596628cce249",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the client exists",
      "fullTitle": "Clients Verify the client exists",
      "timedOut": false,
      "duration": 318,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f56b00c3-a769-43e6-9799-a6e9eaa948bc",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Update the client info",
      "fullTitle": "Clients Update the client info",
      "timedOut": false,
      "duration": 718,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "27127f2e-6c53-4cfe-822b-4c7ff4898ad7",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the client info has been updated",
      "fullTitle": "Clients Verify the client info has been updated",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "28150eb2-8aad-4a49-9ac1-df31d7d11ea3",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Create a client token",
      "fullTitle": "Clients Create a client token",
      "timedOut": false,
      "duration": 267,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "13a91038-6b29-48dc-bb30-aabfdb1f404e",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the token exists",
      "fullTitle": "Clients Verify the token exists",
      "timedOut": false,
      "duration": 634,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fc1f3168-5ce8-4e02-91e6-8d98c97fd8d7",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Update the token record",
      "fullTitle": "Clients Update the token record",
      "timedOut": false,
      "duration": 340,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "37907b1f-0f0d-4e7c-ba43-0486e4eb126c",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Verify the token record has been updated",
      "fullTitle": "Clients Verify the token record has been updated",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dffd576a-4734-40db-8814-df16c30f7a18",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Regenerate the client token and verify it is different",
      "fullTitle": "Clients Regenerate the client token and verify it is different",
      "timedOut": false,
      "duration": 260,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "23caa1e8-d03f-492c-a58b-2ed0c7f03352",
      "parentUUID": "9508ab66-e0c5-44b4-91c8-c29141a465b3",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Service classes Create an ecosystem",
      "timedOut": false,
      "duration": 313,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cb8d7427-31e7-4051-b202-3b1244b0a084",
      "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
      "skipped": false
    },
    {
      "title": "Create a new service class",
      "fullTitle": "Service classes Create a new service class",
      "timedOut": false,
      "duration": 273,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "47b5fe30-32f2-418e-8763-31cf1c81f188",
      "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
      "skipped": false
    },
    {
      "title": "Verify the service class exists",
      "fullTitle": "Service classes Verify the service class exists",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1edb8db8-6031-49fd-8e61-3a1b8fc44669",
      "parentUUID": "bbb3bdb6-f341-44ed-8a6d-8a0f46c6affd",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "Verify the property has been set using refresh = true",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
      "timedOut": true,
      "duration": 10001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "7a276867-ba7b-4c6b-a525-70b0d8f8cc58",
      "parentUUID": "edd6f694-7fa4-4b9b-9289-f9b59b493fd0",
      "skipped": false
    },
    {
      "title": "List environments",
      "fullTitle": "Users List environments",
      "timedOut": false,
      "duration": 256,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 500 to equal 200",
        "showDiff": true,
        "actual": "500",
        "expected": "200",
        "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 500\n+ 200\n",
        "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:709:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "61f5f686-d3cc-48e1-b4ce-de978255a3b4",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "List devices",
      "fullTitle": "Users List devices",
      "timedOut": false,
      "duration": 254,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:720:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "c6de8e3a-78c6-4d47-9d21-2892a5522290",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to list devices in the second environment",
      "fullTitle": "Users Fail to list devices in the second environment",
      "timedOut": false,
      "duration": 365,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected null to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": null,
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:731:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "4dd6be63-2961-463e-8226-0867afd0ad0b",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Set device service property",
      "fullTitle": "Users Set device service property",
      "timedOut": false,
      "duration": 433,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:741:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "d87f527f-b062-42f7-9fdc-952d7f860528",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Update device record",
      "fullTitle": "Users Update device record",
      "timedOut": false,
      "duration": 267,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:753:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "ca02a92d-cb2a-423c-8569-721c7756af22",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Users Create a zone",
      "timedOut": false,
      "duration": 333,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 201",
        "showDiff": true,
        "actual": "403",
        "expected": "201",
        "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 201\n",
        "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:761:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "951c6118-d213-4f3c-b0ce-e00b77018966",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone",
      "fullTitle": "Users Add the first device to the zone",
      "timedOut": false,
      "duration": 243,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 201",
        "showDiff": true,
        "actual": "400",
        "expected": "201",
        "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 201\n",
        "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "240282f4-65a2-4e69-8205-4008c152119e",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Fail to add the second device to the zone",
      "fullTitle": "Users Fail to add the second device to the zone",
      "timedOut": false,
      "duration": 259,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": {
          "errorType": "InvalidParams",
          "errors": [
            {
              "in": "path",
              "message": "invalid id",
              "path": "id"
            }
          ]
        },
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:779:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "87082ccd-bfeb-4b4b-88c2-9e0d3039c0cb",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Delete the first device",
      "fullTitle": "Users Delete the first device",
      "timedOut": false,
      "duration": 297,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:795:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "8d7df625-a4d0-4fa7-88ab-f8d60d36f736",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    },
    {
      "title": "Delete the first environment",
      "fullTitle": "Users Delete the first environment",
      "timedOut": false,
      "duration": 277,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:803:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "95612f7a-a4b7-4017-a865-7ef697cbe033",
      "parentUUID": "6e8ad82b-cb59-4051-a984-55cac7c5da2c",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}