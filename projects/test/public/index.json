{
  "stats": {
    "suites": 6,
    "tests": 69,
    "passes": 57,
    "pending": 0,
    "failures": 12,
    "start": "2017-05-05T21:21:00.406Z",
    "end": "2017-05-05T21:21:50.953Z",
    "duration": 50547,
    "testsRegistered": 69,
    "passPercent": 82.6,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Ecosystems, Environments, Devices, and Zones",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
            "timedOut": false,
            "duration": 349,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "54e0a347-64a9-4c95-84c9-879508374ef7",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the ecosystem exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
            "timedOut": false,
            "duration": 331,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f89bc330-1b82-4105-b25c-dc92fdbdf73f",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ce7254fc-1c27-4120-83ba-1247e938ae33",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the environment exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
            "timedOut": false,
            "duration": 271,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "07a7e905-e8ac-4a1e-a258-74df662654f1",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
            "timedOut": false,
            "duration": 328,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e1fccd47-3bd7-409b-855f-9665aa6103b5",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the device exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7651ea42-6be9-4999-9013-7593dcd804bd",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Set a service property on a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
            "timedOut": false,
            "duration": 304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "23614b9c-3c77-4b1a-ad6c-afb138e31641",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the property value has changed",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
            "timedOut": false,
            "duration": 282,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50543a2f-7f4b-4024-9534-f40c8d95b388",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Update the device record",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1719043c-4194-4404-83a7-5c5d7e01c590",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the record has been updated",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a1a369c1-b507-4626-a27c-d93d99531f15",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create and add a second device to the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
            "timedOut": false,
            "duration": 340,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "44e2d2d6-4732-4522-a106-46619384d9a8",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Set a service property on the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
            "timedOut": false,
            "duration": 282,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8f8371b1-3d95-4770-911a-dc7b8bfacb5d",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the property has been set on both devices",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ef36cc79-dcca-4835-9402-bc2e1226ea7d",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create a third device in the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
            "timedOut": false,
            "duration": 291,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "382d5849-3843-4faf-8b02-57ae8b43b87f",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
            "timedOut": false,
            "duration": 278,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5ba4bfaf-6a38-4260-9bf4-5e8c39fdb037",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the zone exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "97aacd2e-c187-4d69-aeb6-82be462c722e",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone, add the second device to the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4e00c001-f162-408b-bb98-d570eb0c00b0",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that both devices and no others are in the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
            "timedOut": false,
            "duration": 248,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f0112b0a-5e9c-455a-baf0-7b271e79c628",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Set a service property on the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0900e25a-8fdf-426c-a3df-d4c1285429c5",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that device 1 and 2 have the property set, but not device 3",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
            "timedOut": false,
            "duration": 336,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "891eae3f-a83b-465b-a4cc-c792fb3d39bb",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
            "timedOut": false,
            "duration": 349,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "54e0a347-64a9-4c95-84c9-879508374ef7",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the ecosystem exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
            "timedOut": false,
            "duration": 331,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f89bc330-1b82-4105-b25c-dc92fdbdf73f",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ce7254fc-1c27-4120-83ba-1247e938ae33",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the environment exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
            "timedOut": false,
            "duration": 271,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "07a7e905-e8ac-4a1e-a258-74df662654f1",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
            "timedOut": false,
            "duration": 328,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e1fccd47-3bd7-409b-855f-9665aa6103b5",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the device exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7651ea42-6be9-4999-9013-7593dcd804bd",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Set a service property on a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
            "timedOut": false,
            "duration": 304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "23614b9c-3c77-4b1a-ad6c-afb138e31641",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the property value has changed",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
            "timedOut": false,
            "duration": 282,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50543a2f-7f4b-4024-9534-f40c8d95b388",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Update the device record",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1719043c-4194-4404-83a7-5c5d7e01c590",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the record has been updated",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a1a369c1-b507-4626-a27c-d93d99531f15",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create and add a second device to the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
            "timedOut": false,
            "duration": 340,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "44e2d2d6-4732-4522-a106-46619384d9a8",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Set a service property on the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
            "timedOut": false,
            "duration": 282,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8f8371b1-3d95-4770-911a-dc7b8bfacb5d",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the property has been set on both devices",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ef36cc79-dcca-4835-9402-bc2e1226ea7d",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create a third device in the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
            "timedOut": false,
            "duration": 291,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "382d5849-3843-4faf-8b02-57ae8b43b87f",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
            "timedOut": false,
            "duration": 278,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5ba4bfaf-6a38-4260-9bf4-5e8c39fdb037",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that the zone exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
            "timedOut": false,
            "duration": 253,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "97aacd2e-c187-4d69-aeb6-82be462c722e",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone, add the second device to the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
            "timedOut": false,
            "duration": 290,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4e00c001-f162-408b-bb98-d570eb0c00b0",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that both devices and no others are in the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
            "timedOut": false,
            "duration": 248,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f0112b0a-5e9c-455a-baf0-7b271e79c628",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Set a service property on the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0900e25a-8fdf-426c-a3df-d4c1285429c5",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          },
          {
            "title": "Verify that device 1 and 2 have the property set, but not device 3",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
            "timedOut": false,
            "duration": 336,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
            "err": {},
            "isRoot": false,
            "uuid": "891eae3f-a83b-465b-a4cc-c792fb3d39bb",
            "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 20,
        "totalPasses": 20,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5802,
        "rootEmpty": false
      },
      {
        "title": "Edge Device, Websockets, and Webhooks",
        "suites": [],
        "tests": [
          {
            "title": "Setup webhook",
            "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
            "timedOut": false,
            "duration": 177,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4579ae13-9ad9-42b3-b0cd-c0e61d374ad3",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Verify webhook is valid",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
            "timedOut": false,
            "duration": 789,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50217df3-1173-453b-84c0-dd7d3bad0bc3",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Get the environment from the running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
            "timedOut": false,
            "duration": 317,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "972ac696-4eb5-476f-b532-7750cfa0044c",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Identify devices that have been created by running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a93c50a7-d67c-411e-aee9-220357381144",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Set a property on a device",
            "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f2ce7761-7119-4ebe-b57f-e9c83d600568",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = false",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "71714a8f-0049-4627-b1a9-c4995a85a7da",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = true",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
            "timedOut": true,
            "duration": 10000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
            },
            "isRoot": false,
            "uuid": "53960798-0ebb-4cbf-bb5e-c563ac6d3350",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Test set and changed messages",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
            "timedOut": false,
            "duration": 5004,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "f8faa794-d931-4b7c-a72a-0b6e2952fd00",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Test service methods and events",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
            "timedOut": false,
            "duration": 5004,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "2dfa273e-a7e1-41a8-94c9-a8c1fa466cf7",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Setup webhook",
            "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
            "timedOut": false,
            "duration": 177,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4579ae13-9ad9-42b3-b0cd-c0e61d374ad3",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Verify webhook is valid",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
            "timedOut": false,
            "duration": 789,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "50217df3-1173-453b-84c0-dd7d3bad0bc3",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Get the environment from the running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
            "timedOut": false,
            "duration": 317,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "972ac696-4eb5-476f-b532-7750cfa0044c",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Identify devices that have been created by running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a93c50a7-d67c-411e-aee9-220357381144",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Set a property on a device",
            "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f2ce7761-7119-4ebe-b57f-e9c83d600568",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = false",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "71714a8f-0049-4627-b1a9-c4995a85a7da",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Test set and changed messages",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
            "timedOut": false,
            "duration": 5004,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "f8faa794-d931-4b7c-a72a-0b6e2952fd00",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          },
          {
            "title": "Test service methods and events",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
            "timedOut": false,
            "duration": 5004,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "2dfa273e-a7e1-41a8-94c9-a8c1fa466cf7",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Verify the property has been set using refresh = true",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
            "timedOut": true,
            "duration": 10000,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
            },
            "isRoot": false,
            "uuid": "53960798-0ebb-4cbf-bb5e-c563ac6d3350",
            "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 8,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 22070,
        "rootEmpty": false
      },
      {
        "title": "History",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "History Create an ecosystem",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c1c90e1-a6b4-4355-aa10-37f863109c96",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "History Create an environment",
            "timedOut": false,
            "duration": 307,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "483f022c-8922-47c0-9e50-18c0582e7788",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "History Create a virtual device",
            "timedOut": false,
            "duration": 313,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fe8bdae6-80f9-4e20-b551-cfc62edc05e8",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 303,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fd19796d-aae7-478f-833f-6adc9ba9a554",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b8d15f44-406c-438e-a99d-6524decd6f29",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Call a service method on the device",
            "fullTitle": "History Call a service method on the device",
            "timedOut": false,
            "duration": 480,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0f363530-0020-499a-aa62-42ebfb3e9e04",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Verify device history is correct",
            "fullTitle": "History Verify device history is correct",
            "timedOut": false,
            "duration": 326,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e8580836-5cbc-409b-9489-4a439accad38",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Verify environment history is correct",
            "fullTitle": "History Verify environment history is correct",
            "timedOut": false,
            "duration": 325,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "157e733d-017d-42a3-b82b-1f8f07eea25c",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "bd166faf-6466-498e-817c-a38da029ebad",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "History Create an ecosystem",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c1c90e1-a6b4-4355-aa10-37f863109c96",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "History Create an environment",
            "timedOut": false,
            "duration": 307,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "483f022c-8922-47c0-9e50-18c0582e7788",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "History Create a virtual device",
            "timedOut": false,
            "duration": 313,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fe8bdae6-80f9-4e20-b551-cfc62edc05e8",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 303,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fd19796d-aae7-478f-833f-6adc9ba9a554",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b8d15f44-406c-438e-a99d-6524decd6f29",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Call a service method on the device",
            "fullTitle": "History Call a service method on the device",
            "timedOut": false,
            "duration": 480,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0f363530-0020-499a-aa62-42ebfb3e9e04",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Verify device history is correct",
            "fullTitle": "History Verify device history is correct",
            "timedOut": false,
            "duration": 326,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e8580836-5cbc-409b-9489-4a439accad38",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          },
          {
            "title": "Verify environment history is correct",
            "fullTitle": "History Verify environment history is correct",
            "timedOut": false,
            "duration": 325,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "157e733d-017d-42a3-b82b-1f8f07eea25c",
            "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2584,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Users Create an ecosystem",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ecae5e94-35fd-4103-bae7-10a4a8aa7149",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Users Create an environment",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "186a56e1-c51f-46e4-aa87-d7dd1a813a6f",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create another environment",
            "fullTitle": "Users Create another environment",
            "timedOut": false,
            "duration": 358,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0be55b81-cf24-466a-b2ab-22492e69bad5",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the first environment",
            "fullTitle": "Users Create a virtual device in the first environment",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "979cee11-157a-4568-be14-5fe58caef30c",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the second environment",
            "fullTitle": "Users Create a virtual device in the second environment",
            "timedOut": false,
            "duration": 274,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f43acd94-d8c1-4680-b8a7-2e166dfdef3a",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a user and grant access to the first environment",
            "fullTitle": "Users Create a user and grant access to the first environment",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ecef373a-bded-4466-9f1c-de50fa5de3eb",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Verify the user exists",
            "fullTitle": "Users Verify the user exists",
            "timedOut": false,
            "duration": 267,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.users.read(userId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.exist;\n    chai_1.expect(value.body.id).to.equal(userId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 400 to equal 200",
              "showDiff": true,
              "actual": "400",
              "expected": "200",
              "estack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 200\n",
              "stack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "9a377fe3-a08d-4b4b-ab79-fafcd9eb5ecf",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to list ecosystems",
            "fullTitle": "Users Fail to list ecosystems",
            "timedOut": false,
            "duration": 248,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "db6a444f-bbfb-48dd-84ba-e5101b375e7f",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "List environments",
            "fullTitle": "Users List environments",
            "timedOut": false,
            "duration": 242,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 500 to equal 200",
              "showDiff": true,
              "actual": "500",
              "expected": "200",
              "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 500\n+ 200\n",
              "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "700fc2d6-9d36-41d4-84b4-c021e37aa7d8",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "List devices",
            "fullTitle": "Users List devices",
            "timedOut": false,
            "duration": 306,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "9ec81510-2426-4df2-88e8-db77f37280b1",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to list devices in the second environment",
            "fullTitle": "Users Fail to list devices in the second environment",
            "timedOut": false,
            "duration": 342,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected null to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": null,
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "a3bad023-5b2c-4633-98c1-714c33a9f11d",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Set device service property",
            "fullTitle": "Users Set device service property",
            "timedOut": false,
            "duration": 272,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "27b124b1-44d9-464c-ac85-972c1d99ee0a",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Update device record",
            "fullTitle": "Users Update device record",
            "timedOut": false,
            "duration": 374,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "388cebd4-23ae-4057-bd9b-f31eb7399231",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Users Create a zone",
            "timedOut": false,
            "duration": 316,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 201",
              "showDiff": true,
              "actual": "403",
              "expected": "201",
              "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 201\n",
              "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "b3c9b35f-13d9-4115-a679-22a46c36b8e4",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone",
            "fullTitle": "Users Add the first device to the zone",
            "timedOut": false,
            "duration": 241,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 400 to equal 201",
              "showDiff": true,
              "actual": "400",
              "expected": "201",
              "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 201\n",
              "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "a168b251-fd52-420b-9496-268ac1ed441d",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to add the second device to the zone",
            "fullTitle": "Users Fail to add the second device to the zone",
            "timedOut": false,
            "duration": 361,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": {
                "errorType": "InvalidParams",
                "errors": [
                  {
                    "in": "path",
                    "message": "invalid id",
                    "path": "id"
                  }
                ]
              },
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "db62b551-681a-4558-b27d-3014e1baf556",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to delete the ecosystem",
            "fullTitle": "Users Fail to delete the ecosystem",
            "timedOut": false,
            "duration": 246,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "26442e67-3d26-46e7-856a-705b38136b3a",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Delete the first device",
            "fullTitle": "Users Delete the first device",
            "timedOut": false,
            "duration": 267,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "8153c6f5-21c6-45d4-9ca8-42a3f67dcb91",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Delete the first environment",
            "fullTitle": "Users Delete the first environment",
            "timedOut": false,
            "duration": 249,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "58661e47-2ca9-47d7-8cc6-625931dab3af",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Users Create an ecosystem",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ecae5e94-35fd-4103-bae7-10a4a8aa7149",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Users Create an environment",
            "timedOut": false,
            "duration": 259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "186a56e1-c51f-46e4-aa87-d7dd1a813a6f",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create another environment",
            "fullTitle": "Users Create another environment",
            "timedOut": false,
            "duration": 358,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0be55b81-cf24-466a-b2ab-22492e69bad5",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the first environment",
            "fullTitle": "Users Create a virtual device in the first environment",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "979cee11-157a-4568-be14-5fe58caef30c",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the second environment",
            "fullTitle": "Users Create a virtual device in the second environment",
            "timedOut": false,
            "duration": 274,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f43acd94-d8c1-4680-b8a7-2e166dfdef3a",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a user and grant access to the first environment",
            "fullTitle": "Users Create a user and grant access to the first environment",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ecef373a-bded-4466-9f1c-de50fa5de3eb",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to list ecosystems",
            "fullTitle": "Users Fail to list ecosystems",
            "timedOut": false,
            "duration": 248,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "db6a444f-bbfb-48dd-84ba-e5101b375e7f",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to delete the ecosystem",
            "fullTitle": "Users Fail to delete the ecosystem",
            "timedOut": false,
            "duration": 246,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "26442e67-3d26-46e7-856a-705b38136b3a",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Verify the user exists",
            "fullTitle": "Users Verify the user exists",
            "timedOut": false,
            "duration": 267,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.users.read(userId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.exist;\n    chai_1.expect(value.body.id).to.equal(userId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 400 to equal 200",
              "showDiff": true,
              "actual": "400",
              "expected": "200",
              "estack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 200\n",
              "stack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "9a377fe3-a08d-4b4b-ab79-fafcd9eb5ecf",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "List environments",
            "fullTitle": "Users List environments",
            "timedOut": false,
            "duration": 242,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 500 to equal 200",
              "showDiff": true,
              "actual": "500",
              "expected": "200",
              "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 500\n+ 200\n",
              "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "700fc2d6-9d36-41d4-84b4-c021e37aa7d8",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "List devices",
            "fullTitle": "Users List devices",
            "timedOut": false,
            "duration": 306,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "9ec81510-2426-4df2-88e8-db77f37280b1",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to list devices in the second environment",
            "fullTitle": "Users Fail to list devices in the second environment",
            "timedOut": false,
            "duration": 342,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected null to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": null,
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "a3bad023-5b2c-4633-98c1-714c33a9f11d",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Set device service property",
            "fullTitle": "Users Set device service property",
            "timedOut": false,
            "duration": 272,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "27b124b1-44d9-464c-ac85-972c1d99ee0a",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Update device record",
            "fullTitle": "Users Update device record",
            "timedOut": false,
            "duration": 374,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "388cebd4-23ae-4057-bd9b-f31eb7399231",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Users Create a zone",
            "timedOut": false,
            "duration": 316,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 201",
              "showDiff": true,
              "actual": "403",
              "expected": "201",
              "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 201\n",
              "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "b3c9b35f-13d9-4115-a679-22a46c36b8e4",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone",
            "fullTitle": "Users Add the first device to the zone",
            "timedOut": false,
            "duration": 241,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 400 to equal 201",
              "showDiff": true,
              "actual": "400",
              "expected": "201",
              "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 201\n",
              "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "a168b251-fd52-420b-9496-268ac1ed441d",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Fail to add the second device to the zone",
            "fullTitle": "Users Fail to add the second device to the zone",
            "timedOut": false,
            "duration": 361,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
              "showDiff": true,
              "actual": {
                "errorType": "InvalidParams",
                "errors": [
                  {
                    "in": "path",
                    "message": "invalid id",
                    "path": "id"
                  }
                ]
              },
              "expected": "Token type not permitted!",
              "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "db62b551-681a-4558-b27d-3014e1baf556",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Delete the first device",
            "fullTitle": "Users Delete the first device",
            "timedOut": false,
            "duration": 267,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "8153c6f5-21c6-45d4-9ca8-42a3f67dcb91",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          },
          {
            "title": "Delete the first environment",
            "fullTitle": "Users Delete the first environment",
            "timedOut": false,
            "duration": 249,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "message": "expected 403 to equal 200",
              "showDiff": true,
              "actual": "403",
              "expected": "200",
              "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n",
              "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "58661e47-2ca9-47d7-8cc6-625931dab3af",
            "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 19,
        "totalPasses": 8,
        "totalFailures": 11,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5469,
        "rootEmpty": false
      },
      {
        "title": "Clients",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Clients Create an ecosystem",
            "timedOut": false,
            "duration": 315,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "34830fa0-be3d-4979-828e-7aad0f335908",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Create a client",
            "fullTitle": "Clients Create a client",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ae77d249-3761-47a2-9e73-8c13d87b9b62",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the client exists",
            "fullTitle": "Clients Verify the client exists",
            "timedOut": false,
            "duration": 363,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "39560874-d0c1-47b1-9621-e65613f67dca",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Update the client info",
            "fullTitle": "Clients Update the client info",
            "timedOut": false,
            "duration": 298,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ab391ef4-1e5c-4166-9c2c-c1a88c997831",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the client info has been updated",
            "fullTitle": "Clients Verify the client info has been updated",
            "timedOut": false,
            "duration": 241,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a6d356ac-8932-40b7-8b8c-980c989c8fbe",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Create a client token",
            "fullTitle": "Clients Create a client token",
            "timedOut": false,
            "duration": 381,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d778bf10-3242-4685-8bb1-9bec6045c73e",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the token exists",
            "fullTitle": "Clients Verify the token exists",
            "timedOut": false,
            "duration": 2077,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "69110c00-ca16-4fd2-b4e9-f6f03999a93e",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Update the token record",
            "fullTitle": "Clients Update the token record",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1de376c9-e668-48b0-9341-dbc91b90c704",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the token record has been updated",
            "fullTitle": "Clients Verify the token record has been updated",
            "timedOut": false,
            "duration": 341,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fe74bfd2-5438-4ce7-9b66-04ee45cd659e",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Regenerate the client token and verify it is different",
            "fullTitle": "Clients Regenerate the client token and verify it is different",
            "timedOut": false,
            "duration": 263,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9df6e8a1-9984-4d3a-92b5-672d070ba519",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Clients Create an ecosystem",
            "timedOut": false,
            "duration": 315,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "34830fa0-be3d-4979-828e-7aad0f335908",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Create a client",
            "fullTitle": "Clients Create a client",
            "timedOut": false,
            "duration": 251,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ae77d249-3761-47a2-9e73-8c13d87b9b62",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the client exists",
            "fullTitle": "Clients Verify the client exists",
            "timedOut": false,
            "duration": 363,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "39560874-d0c1-47b1-9621-e65613f67dca",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Update the client info",
            "fullTitle": "Clients Update the client info",
            "timedOut": false,
            "duration": 298,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ab391ef4-1e5c-4166-9c2c-c1a88c997831",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the client info has been updated",
            "fullTitle": "Clients Verify the client info has been updated",
            "timedOut": false,
            "duration": 241,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a6d356ac-8932-40b7-8b8c-980c989c8fbe",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Create a client token",
            "fullTitle": "Clients Create a client token",
            "timedOut": false,
            "duration": 381,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d778bf10-3242-4685-8bb1-9bec6045c73e",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the token exists",
            "fullTitle": "Clients Verify the token exists",
            "timedOut": false,
            "duration": 2077,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "69110c00-ca16-4fd2-b4e9-f6f03999a93e",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Update the token record",
            "fullTitle": "Clients Update the token record",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1de376c9-e668-48b0-9341-dbc91b90c704",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Verify the token record has been updated",
            "fullTitle": "Clients Verify the token record has been updated",
            "timedOut": false,
            "duration": 341,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fe74bfd2-5438-4ce7-9b66-04ee45cd659e",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          },
          {
            "title": "Regenerate the client token and verify it is different",
            "fullTitle": "Clients Regenerate the client token and verify it is different",
            "timedOut": false,
            "duration": 263,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9df6e8a1-9984-4d3a-92b5-672d070ba519",
            "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4792,
        "rootEmpty": false
      },
      {
        "title": "Service classes",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Service classes Create an ecosystem",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7f03a248-2375-49ef-8a95-e1604918a7b4",
            "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
            "skipped": false
          },
          {
            "title": "Create a new service class",
            "fullTitle": "Service classes Create a new service class",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c47d046f-850c-49b2-9dbf-58bae34d03f4",
            "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
            "skipped": false
          },
          {
            "title": "Verify the service class exists",
            "fullTitle": "Service classes Verify the service class exists",
            "timedOut": false,
            "duration": 297,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3aba7c7f-e695-4d87-af86-cc2b77ae6d8d",
            "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "f6815883-4876-4e17-9c36-995857ade065",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Service classes Create an ecosystem",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7f03a248-2375-49ef-8a95-e1604918a7b4",
            "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
            "skipped": false
          },
          {
            "title": "Create a new service class",
            "fullTitle": "Service classes Create a new service class",
            "timedOut": false,
            "duration": 280,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c47d046f-850c-49b2-9dbf-58bae34d03f4",
            "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
            "skipped": false
          },
          {
            "title": "Verify the service class exists",
            "fullTitle": "Service classes Verify the service class exists",
            "timedOut": false,
            "duration": 297,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3aba7c7f-e695-4d87-af86-cc2b77ae6d8d",
            "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 844,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "5197c0ea-afc7-428e-ac6f-bf92a0c92398",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Create an ecosystem",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
      "timedOut": false,
      "duration": 349,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "54e0a347-64a9-4c95-84c9-879508374ef7",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the ecosystem exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
      "timedOut": false,
      "duration": 331,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f89bc330-1b82-4105-b25c-dc92fdbdf73f",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
      "timedOut": false,
      "duration": 280,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ce7254fc-1c27-4120-83ba-1247e938ae33",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the environment exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
      "timedOut": false,
      "duration": 271,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "07a7e905-e8ac-4a1e-a258-74df662654f1",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
      "timedOut": false,
      "duration": 328,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e1fccd47-3bd7-409b-855f-9665aa6103b5",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the device exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7651ea42-6be9-4999-9013-7593dcd804bd",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Set a service property on a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
      "timedOut": false,
      "duration": 304,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "23614b9c-3c77-4b1a-ad6c-afb138e31641",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the property value has changed",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
      "timedOut": false,
      "duration": 282,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50543a2f-7f4b-4024-9534-f40c8d95b388",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Update the device record",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1719043c-4194-4404-83a7-5c5d7e01c590",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the record has been updated",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a1a369c1-b507-4626-a27c-d93d99531f15",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create and add a second device to the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
      "timedOut": false,
      "duration": 340,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "44e2d2d6-4732-4522-a106-46619384d9a8",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Set a service property on the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
      "timedOut": false,
      "duration": 282,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8f8371b1-3d95-4770-911a-dc7b8bfacb5d",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the property has been set on both devices",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ef36cc79-dcca-4835-9402-bc2e1226ea7d",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create a third device in the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
      "timedOut": false,
      "duration": 291,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "382d5849-3843-4faf-8b02-57ae8b43b87f",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
      "timedOut": false,
      "duration": 278,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5ba4bfaf-6a38-4260-9bf4-5e8c39fdb037",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the zone exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "97aacd2e-c187-4d69-aeb6-82be462c722e",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone, add the second device to the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4e00c001-f162-408b-bb98-d570eb0c00b0",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that both devices and no others are in the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
      "timedOut": false,
      "duration": 248,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f0112b0a-5e9c-455a-baf0-7b271e79c628",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Set a service property on the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0900e25a-8fdf-426c-a3df-d4c1285429c5",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that device 1 and 2 have the property set, but not device 3",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
      "timedOut": false,
      "duration": 336,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "891eae3f-a83b-465b-a4cc-c792fb3d39bb",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Setup webhook",
      "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
      "timedOut": false,
      "duration": 177,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4579ae13-9ad9-42b3-b0cd-c0e61d374ad3",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Verify webhook is valid",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
      "timedOut": false,
      "duration": 789,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50217df3-1173-453b-84c0-dd7d3bad0bc3",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Get the environment from the running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
      "timedOut": false,
      "duration": 317,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "972ac696-4eb5-476f-b532-7750cfa0044c",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Identify devices that have been created by running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a93c50a7-d67c-411e-aee9-220357381144",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Set a property on a device",
      "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f2ce7761-7119-4ebe-b57f-e9c83d600568",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = false",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
      "timedOut": false,
      "duration": 259,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "71714a8f-0049-4627-b1a9-c4995a85a7da",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = true",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
      "timedOut": true,
      "duration": 10000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "53960798-0ebb-4cbf-bb5e-c563ac6d3350",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Test set and changed messages",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "f8faa794-d931-4b7c-a72a-0b6e2952fd00",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Test service methods and events",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "2dfa273e-a7e1-41a8-94c9-a8c1fa466cf7",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "History Create an ecosystem",
      "timedOut": false,
      "duration": 275,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0c1c90e1-a6b4-4355-aa10-37f863109c96",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "History Create an environment",
      "timedOut": false,
      "duration": 307,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "483f022c-8922-47c0-9e50-18c0582e7788",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "History Create a virtual device",
      "timedOut": false,
      "duration": 313,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe8bdae6-80f9-4e20-b551-cfc62edc05e8",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 303,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fd19796d-aae7-478f-833f-6adc9ba9a554",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b8d15f44-406c-438e-a99d-6524decd6f29",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Call a service method on the device",
      "fullTitle": "History Call a service method on the device",
      "timedOut": false,
      "duration": 480,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0f363530-0020-499a-aa62-42ebfb3e9e04",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Verify device history is correct",
      "fullTitle": "History Verify device history is correct",
      "timedOut": false,
      "duration": 326,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e8580836-5cbc-409b-9489-4a439accad38",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Verify environment history is correct",
      "fullTitle": "History Verify environment history is correct",
      "timedOut": false,
      "duration": 325,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "157e733d-017d-42a3-b82b-1f8f07eea25c",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Users Create an ecosystem",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ecae5e94-35fd-4103-bae7-10a4a8aa7149",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Users Create an environment",
      "timedOut": false,
      "duration": 259,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "186a56e1-c51f-46e4-aa87-d7dd1a813a6f",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create another environment",
      "fullTitle": "Users Create another environment",
      "timedOut": false,
      "duration": 358,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0be55b81-cf24-466a-b2ab-22492e69bad5",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the first environment",
      "fullTitle": "Users Create a virtual device in the first environment",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "979cee11-157a-4568-be14-5fe58caef30c",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the second environment",
      "fullTitle": "Users Create a virtual device in the second environment",
      "timedOut": false,
      "duration": 274,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f43acd94-d8c1-4680-b8a7-2e166dfdef3a",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a user and grant access to the first environment",
      "fullTitle": "Users Create a user and grant access to the first environment",
      "timedOut": false,
      "duration": 279,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ecef373a-bded-4466-9f1c-de50fa5de3eb",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Verify the user exists",
      "fullTitle": "Users Verify the user exists",
      "timedOut": false,
      "duration": 267,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.users.read(userId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.exist;\n    chai_1.expect(value.body.id).to.equal(userId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 200",
        "showDiff": true,
        "actual": "400",
        "expected": "200",
        "estack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 200\n",
        "stack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "9a377fe3-a08d-4b4b-ab79-fafcd9eb5ecf",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to list ecosystems",
      "fullTitle": "Users Fail to list ecosystems",
      "timedOut": false,
      "duration": 248,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "db6a444f-bbfb-48dd-84ba-e5101b375e7f",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "List environments",
      "fullTitle": "Users List environments",
      "timedOut": false,
      "duration": 242,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 500 to equal 200",
        "showDiff": true,
        "actual": "500",
        "expected": "200",
        "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 500\n+ 200\n",
        "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "700fc2d6-9d36-41d4-84b4-c021e37aa7d8",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "List devices",
      "fullTitle": "Users List devices",
      "timedOut": false,
      "duration": 306,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "9ec81510-2426-4df2-88e8-db77f37280b1",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to list devices in the second environment",
      "fullTitle": "Users Fail to list devices in the second environment",
      "timedOut": false,
      "duration": 342,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected null to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": null,
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "a3bad023-5b2c-4633-98c1-714c33a9f11d",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Set device service property",
      "fullTitle": "Users Set device service property",
      "timedOut": false,
      "duration": 272,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "27b124b1-44d9-464c-ac85-972c1d99ee0a",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Update device record",
      "fullTitle": "Users Update device record",
      "timedOut": false,
      "duration": 374,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "388cebd4-23ae-4057-bd9b-f31eb7399231",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Users Create a zone",
      "timedOut": false,
      "duration": 316,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 201",
        "showDiff": true,
        "actual": "403",
        "expected": "201",
        "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 201\n",
        "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "b3c9b35f-13d9-4115-a679-22a46c36b8e4",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone",
      "fullTitle": "Users Add the first device to the zone",
      "timedOut": false,
      "duration": 241,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 201",
        "showDiff": true,
        "actual": "400",
        "expected": "201",
        "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 201\n",
        "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "a168b251-fd52-420b-9496-268ac1ed441d",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to add the second device to the zone",
      "fullTitle": "Users Fail to add the second device to the zone",
      "timedOut": false,
      "duration": 361,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": {
          "errorType": "InvalidParams",
          "errors": [
            {
              "in": "path",
              "message": "invalid id",
              "path": "id"
            }
          ]
        },
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "db62b551-681a-4558-b27d-3014e1baf556",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to delete the ecosystem",
      "fullTitle": "Users Fail to delete the ecosystem",
      "timedOut": false,
      "duration": 246,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "26442e67-3d26-46e7-856a-705b38136b3a",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Delete the first device",
      "fullTitle": "Users Delete the first device",
      "timedOut": false,
      "duration": 267,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "8153c6f5-21c6-45d4-9ca8-42a3f67dcb91",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Delete the first environment",
      "fullTitle": "Users Delete the first environment",
      "timedOut": false,
      "duration": 249,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "58661e47-2ca9-47d7-8cc6-625931dab3af",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Clients Create an ecosystem",
      "timedOut": false,
      "duration": 315,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "34830fa0-be3d-4979-828e-7aad0f335908",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Create a client",
      "fullTitle": "Clients Create a client",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ae77d249-3761-47a2-9e73-8c13d87b9b62",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the client exists",
      "fullTitle": "Clients Verify the client exists",
      "timedOut": false,
      "duration": 363,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "39560874-d0c1-47b1-9621-e65613f67dca",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Update the client info",
      "fullTitle": "Clients Update the client info",
      "timedOut": false,
      "duration": 298,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ab391ef4-1e5c-4166-9c2c-c1a88c997831",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the client info has been updated",
      "fullTitle": "Clients Verify the client info has been updated",
      "timedOut": false,
      "duration": 241,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a6d356ac-8932-40b7-8b8c-980c989c8fbe",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Create a client token",
      "fullTitle": "Clients Create a client token",
      "timedOut": false,
      "duration": 381,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d778bf10-3242-4685-8bb1-9bec6045c73e",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the token exists",
      "fullTitle": "Clients Verify the token exists",
      "timedOut": false,
      "duration": 2077,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "69110c00-ca16-4fd2-b4e9-f6f03999a93e",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Update the token record",
      "fullTitle": "Clients Update the token record",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1de376c9-e668-48b0-9341-dbc91b90c704",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the token record has been updated",
      "fullTitle": "Clients Verify the token record has been updated",
      "timedOut": false,
      "duration": 341,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe74bfd2-5438-4ce7-9b66-04ee45cd659e",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Regenerate the client token and verify it is different",
      "fullTitle": "Clients Regenerate the client token and verify it is different",
      "timedOut": false,
      "duration": 263,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9df6e8a1-9984-4d3a-92b5-672d070ba519",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Service classes Create an ecosystem",
      "timedOut": false,
      "duration": 267,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7f03a248-2375-49ef-8a95-e1604918a7b4",
      "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
      "skipped": false
    },
    {
      "title": "Create a new service class",
      "fullTitle": "Service classes Create a new service class",
      "timedOut": false,
      "duration": 280,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c47d046f-850c-49b2-9dbf-58bae34d03f4",
      "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
      "skipped": false
    },
    {
      "title": "Verify the service class exists",
      "fullTitle": "Service classes Verify the service class exists",
      "timedOut": false,
      "duration": 297,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3aba7c7f-e695-4d87-af86-cc2b77ae6d8d",
      "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Create an ecosystem",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
      "timedOut": false,
      "duration": 349,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "54e0a347-64a9-4c95-84c9-879508374ef7",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the ecosystem exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
      "timedOut": false,
      "duration": 331,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(ecosystemId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f89bc330-1b82-4105-b25c-dc92fdbdf73f",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
      "timedOut": false,
      "duration": 280,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ce7254fc-1c27-4120-83ba-1247e938ae33",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the environment exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
      "timedOut": false,
      "duration": 271,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.info(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "07a7e905-e8ac-4a1e-a258-74df662654f1",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
      "timedOut": false,
      "duration": 328,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e1fccd47-3bd7-409b-855f-9665aa6103b5",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the device exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7651ea42-6be9-4999-9013-7593dcd804bd",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Set a service property on a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
      "timedOut": false,
      "duration": 304,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "23614b9c-3c77-4b1a-ad6c-afb138e31641",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the property value has changed",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
      "timedOut": false,
      "duration": 282,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50543a2f-7f4b-4024-9534-f40c8d95b388",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Update the device record",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1719043c-4194-4404-83a7-5c5d7e01c590",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the record has been updated",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.meta.$label).to.exist;\n    chai_1.expect(value.body.meta.$label).to.equal('New Label');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a1a369c1-b507-4626-a27c-d93d99531f15",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create and add a second device to the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
      "timedOut": false,
      "duration": 340,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "44e2d2d6-4732-4522-a106-46619384d9a8",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Set a service property on the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
      "timedOut": false,
      "duration": 282,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8f8371b1-3d95-4770-911a-dc7b8bfacb5d",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the property has been set on both devices",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        chai_1.expect(value.body.items).to.have.lengthOf(1);\n        chai_1.expect(value.body.items[0].value).to.equal('on');\n        if (++devicesChecked === 2) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ef36cc79-dcca-4835-9402-bc2e1226ea7d",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create a third device in the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
      "timedOut": false,
      "duration": 291,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "382d5849-3843-4faf-8b02-57ae8b43b87f",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
      "timedOut": false,
      "duration": 278,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5ba4bfaf-6a38-4260-9bf4-5e8c39fdb037",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that the zone exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
      "timedOut": false,
      "duration": 253,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.info(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.equal(zoneId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "97aacd2e-c187-4d69-aeb6-82be462c722e",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone, add the second device to the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        chai_1.expect(value.status).to.equal(201);\n        if (++devicesAdded === 2) {\n            done();\n        }\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4e00c001-f162-408b-bb98-d570eb0c00b0",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that both devices and no others are in the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
      "timedOut": false,
      "duration": 248,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(2);\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        chai_1.expect(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        })).to.be.true;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f0112b0a-5e9c-455a-baf0-7b271e79c628",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Set a service property on the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0900e25a-8fdf-426c-a3df-d4c1285429c5",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Verify that device 1 and 2 have the property set, but not device 3",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
      "timedOut": false,
      "duration": 336,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        chai_1.expect(value.status).to.equal(200);\n        chai_1.expect(value.body.items).to.exist;\n        if (index === 2) {\n            chai_1.expect(value.body.items).to.have.lengthOf(0);\n        }\n        else {\n            chai_1.expect(value.body.items).to.have.lengthOf(1);\n            chai_1.expect(value.body.items[0].value).to.equal('on');\n        }\n        if (++devicesChecked === 3) {\n            done();\n        }\n    }).catch(function (error) {\n        done(error);\n    });\n});",
      "err": {},
      "isRoot": false,
      "uuid": "891eae3f-a83b-465b-a4cc-c792fb3d39bb",
      "parentUUID": "a0545243-4f35-4ffa-8c69-c27a76cb34bc",
      "skipped": false
    },
    {
      "title": "Setup webhook",
      "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
      "timedOut": false,
      "duration": 177,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4579ae13-9ad9-42b3-b0cd-c0e61d374ad3",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Verify webhook is valid",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
      "timedOut": false,
      "duration": 789,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "50217df3-1173-453b-84c0-dd7d3bad0bc3",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Get the environment from the running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
      "timedOut": false,
      "duration": 317,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "972ac696-4eb5-476f-b532-7750cfa0044c",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Identify devices that have been created by running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.list(environmentId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.length.above(0);\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a93c50a7-d67c-411e-aee9-220357381144",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Set a property on a device",
      "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
      "timedOut": false,
      "duration": 254,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f2ce7761-7119-4ebe-b57f-e9c83d600568",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = false",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
      "timedOut": false,
      "duration": 259,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "71714a8f-0049-4627-b1a9-c4995a85a7da",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Test set and changed messages",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketSet).to.be.true;\n        chai_1.expect(websocketChanged).to.be.true;\n        chai_1.expect(webhookSet).to.be.true;\n        chai_1.expect(webhookChanged).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "f8faa794-d931-4b7c-a72a-0b6e2952fd00",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Test service methods and events",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
      "timedOut": false,
      "duration": 5004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        chai_1.expect(websocketCall).to.be.true;\n        chai_1.expect(websocketEvent).to.be.true;\n        chai_1.expect(webhookCall).to.be.true;\n        chai_1.expect(webhookEvent).to.be.true;\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "2dfa273e-a7e1-41a8-94c9-a8c1fa466cf7",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "History Create an ecosystem",
      "timedOut": false,
      "duration": 275,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0c1c90e1-a6b4-4355-aa10-37f863109c96",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "History Create an environment",
      "timedOut": false,
      "duration": 307,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "483f022c-8922-47c0-9e50-18c0582e7788",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "History Create a virtual device",
      "timedOut": false,
      "duration": 313,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe8bdae6-80f9-4e20-b551-cfc62edc05e8",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 303,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fd19796d-aae7-478f-833f-6adc9ba9a554",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b8d15f44-406c-438e-a99d-6524decd6f29",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Call a service method on the device",
      "fullTitle": "History Call a service method on the device",
      "timedOut": false,
      "duration": 480,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0f363530-0020-499a-aa62-42ebfb3e9e04",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Verify device history is correct",
      "fullTitle": "History Verify device history is correct",
      "timedOut": false,
      "duration": 326,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e8580836-5cbc-409b-9489-4a439accad38",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Verify environment history is correct",
      "fullTitle": "History Verify environment history is correct",
      "timedOut": false,
      "duration": 325,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.have.lengthOf(3);\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                chai_1.expect(item.type).to.equal('call');\n                break;\n            case 1:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('off');\n                break;\n            case 2:\n                chai_1.expect(item.type).to.equal('set');\n                chai_1.expect(item.value).to.equal('on');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "157e733d-017d-42a3-b82b-1f8f07eea25c",
      "parentUUID": "bd166faf-6466-498e-817c-a38da029ebad",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Users Create an ecosystem",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ecae5e94-35fd-4103-bae7-10a4a8aa7149",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Users Create an environment",
      "timedOut": false,
      "duration": 259,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "186a56e1-c51f-46e4-aa87-d7dd1a813a6f",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create another environment",
      "fullTitle": "Users Create another environment",
      "timedOut": false,
      "duration": 358,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0be55b81-cf24-466a-b2ab-22492e69bad5",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the first environment",
      "fullTitle": "Users Create a virtual device in the first environment",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "979cee11-157a-4568-be14-5fe58caef30c",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the second environment",
      "fullTitle": "Users Create a virtual device in the second environment",
      "timedOut": false,
      "duration": 274,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f43acd94-d8c1-4680-b8a7-2e166dfdef3a",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a user and grant access to the first environment",
      "fullTitle": "Users Create a user and grant access to the first environment",
      "timedOut": false,
      "duration": 279,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ecef373a-bded-4466-9f1c-de50fa5de3eb",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to list ecosystems",
      "fullTitle": "Users Fail to list ecosystems",
      "timedOut": false,
      "duration": 248,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.list().then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "db6a444f-bbfb-48dd-84ba-e5101b375e7f",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to delete the ecosystem",
      "fullTitle": "Users Fail to delete the ecosystem",
      "timedOut": false,
      "duration": 246,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "26442e67-3d26-46e7-856a-705b38136b3a",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Clients Create an ecosystem",
      "timedOut": false,
      "duration": 315,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "34830fa0-be3d-4979-828e-7aad0f335908",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Create a client",
      "fullTitle": "Clients Create a client",
      "timedOut": false,
      "duration": 251,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    clientId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ae77d249-3761-47a2-9e73-8c13d87b9b62",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the client exists",
      "fullTitle": "Clients Verify the client exists",
      "timedOut": false,
      "duration": 363,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "39560874-d0c1-47b1-9621-e65613f67dca",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Update the client info",
      "fullTitle": "Clients Update the client info",
      "timedOut": false,
      "duration": 298,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ab391ef4-1e5c-4166-9c2c-c1a88c997831",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the client info has been updated",
      "fullTitle": "Clients Verify the client info has been updated",
      "timedOut": false,
      "duration": 241,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.name).to.exist;\n    chai_1.expect(value.body.name).to.equal('Test Client');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a6d356ac-8932-40b7-8b8c-980c989c8fbe",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Create a client token",
      "fullTitle": "Clients Create a client token",
      "timedOut": false,
      "duration": 381,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.create(clientId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d778bf10-3242-4685-8bb1-9bec6045c73e",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the token exists",
      "fullTitle": "Clients Verify the token exists",
      "timedOut": false,
      "duration": 2077,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "69110c00-ca16-4fd2-b4e9-f6f03999a93e",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Update the token record",
      "fullTitle": "Clients Update the token record",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1de376c9-e668-48b0-9341-dbc91b90c704",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Verify the token record has been updated",
      "fullTitle": "Clients Verify the token record has been updated",
      "timedOut": false,
      "duration": 341,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.description).to.exist;\n    chai_1.expect(value.body.description).to.equal('Primary access token');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fe74bfd2-5438-4ce7-9b66-04ee45cd659e",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Regenerate the client token and verify it is different",
      "fullTitle": "Clients Regenerate the client token and verify it is different",
      "timedOut": false,
      "duration": 263,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.token).to.exist;\n    chai_1.expect(value.body.token).to.not.equal(token);\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9df6e8a1-9984-4d3a-92b5-672d070ba519",
      "parentUUID": "336735d8-1efb-4f6b-803c-e2cb2bfe4ed9",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Service classes Create an ecosystem",
      "timedOut": false,
      "duration": 267,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7f03a248-2375-49ef-8a95-e1604918a7b4",
      "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
      "skipped": false
    },
    {
      "title": "Create a new service class",
      "fullTitle": "Service classes Create a new service class",
      "timedOut": false,
      "duration": 280,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c47d046f-850c-49b2-9dbf-58bae34d03f4",
      "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
      "skipped": false
    },
    {
      "title": "Verify the service class exists",
      "fullTitle": "Service classes Verify the service class exists",
      "timedOut": false,
      "duration": 297,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].name).to.equal('Test');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3aba7c7f-e695-4d87-af86-cc2b77ae6d8d",
      "parentUUID": "f6815883-4876-4e17-9c36-995857ade065",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "Verify the property has been set using refresh = true",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
      "timedOut": true,
      "duration": 10000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].value).to.equal('on');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "53960798-0ebb-4cbf-bb5e-c563ac6d3350",
      "parentUUID": "a97465ba-e3c8-47c3-b840-1ba81b7049f5",
      "skipped": false
    },
    {
      "title": "Verify the user exists",
      "fullTitle": "Users Verify the user exists",
      "timedOut": false,
      "duration": 267,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.users.read(userId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.id).to.exist;\n    chai_1.expect(value.body.id).to.equal(userId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 200",
        "showDiff": true,
        "actual": "400",
        "expected": "200",
        "estack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 200\n",
        "stack": "AssertionError: expected 400 to equal 200\n    at projects\\test\\lib\\test.js:701:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "9a377fe3-a08d-4b4b-ab79-fafcd9eb5ecf",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "List environments",
      "fullTitle": "Users List environments",
      "timedOut": false,
      "duration": 242,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(environmentIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 500 to equal 200",
        "showDiff": true,
        "actual": "500",
        "expected": "200",
        "estack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 500\n+ 200\n",
        "stack": "AssertionError: expected 500 to equal 200\n    at projects\\test\\lib\\test.js:719:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "700fc2d6-9d36-41d4-84b4-c021e37aa7d8",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "List devices",
      "fullTitle": "Users List devices",
      "timedOut": false,
      "duration": 306,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    chai_1.expect(value.body.items).to.exist;\n    chai_1.expect(value.body.items).to.have.lengthOf(1);\n    chai_1.expect(value.body.items[0].id).to.equal(deviceIds[0]);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:730:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "9ec81510-2426-4df2-88e8-db77f37280b1",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to list devices in the second environment",
      "fullTitle": "Users Fail to list devices in the second environment",
      "timedOut": false,
      "duration": 342,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected null to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": null,
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected null to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:741:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "a3bad023-5b2c-4633-98c1-714c33a9f11d",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Set device service property",
      "fullTitle": "Users Set device service property",
      "timedOut": false,
      "duration": 272,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:751:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "27b124b1-44d9-464c-ac85-972c1d99ee0a",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Update device record",
      "fullTitle": "Users Update device record",
      "timedOut": false,
      "duration": 374,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:763:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "388cebd4-23ae-4057-bd9b-f31eb7399231",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Users Create a zone",
      "timedOut": false,
      "duration": 316,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    chai_1.expect(value.body.id).to.exist;\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 201",
        "showDiff": true,
        "actual": "403",
        "expected": "201",
        "estack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 201\n",
        "stack": "AssertionError: expected 403 to equal 201\n    at projects\\test\\lib\\test.js:771:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "b3c9b35f-13d9-4115-a679-22a46c36b8e4",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone",
      "fullTitle": "Users Add the first device to the zone",
      "timedOut": false,
      "duration": 241,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(201);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 201",
        "showDiff": true,
        "actual": "400",
        "expected": "201",
        "estack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 201\n",
        "stack": "AssertionError: expected 400 to equal 201\n    at projects\\test\\lib\\test.js:781:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "a168b251-fd52-420b-9496-268ac1ed441d",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Fail to add the second device to the zone",
      "fullTitle": "Users Fail to add the second device to the zone",
      "timedOut": false,
      "duration": 361,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    chai_1.expect(value.body).to.equal('Token type not permitted!');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected { Object (errorType, errors) } to equal 'Token type not permitted!'",
        "showDiff": true,
        "actual": {
          "errorType": "InvalidParams",
          "errors": [
            {
              "in": "path",
              "message": "invalid id",
              "path": "id"
            }
          ]
        },
        "expected": "Token type not permitted!",
        "estack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "stack": "AssertionError: expected { Object (errorType, errors) } to equal 'Token type not permitted!'\n    at projects\\test\\lib\\test.js:789:42\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "db62b551-681a-4558-b27d-3014e1baf556",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Delete the first device",
      "fullTitle": "Users Delete the first device",
      "timedOut": false,
      "duration": 267,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:805:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "8153c6f5-21c6-45d4-9ca8-42a3f67dcb91",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    },
    {
      "title": "Delete the first environment",
      "fullTitle": "Users Delete the first environment",
      "timedOut": false,
      "duration": 249,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    chai_1.expect(value.status).to.equal(200);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "message": "expected 403 to equal 200",
        "showDiff": true,
        "actual": "403",
        "expected": "200",
        "estack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n",
        "stack": "AssertionError: expected 403 to equal 200\n    at projects\\test\\lib\\test.js:813:44\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "58661e47-2ca9-47d7-8cc6-625931dab3af",
      "parentUUID": "77ff6b13-1efe-47bf-a4ce-0e9e7dbc1523",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}