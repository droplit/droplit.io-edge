{
  "stats": {
    "suites": 6,
    "tests": 68,
    "passes": 57,
    "pending": 0,
    "failures": 11,
    "start": "2017-05-03T20:52:15.452Z",
    "end": "2017-05-03T20:53:19.332Z",
    "duration": 63880,
    "testsRegistered": 68,
    "passPercent": 83.8,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Ecosystems, Environments, Devices, and Zones",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
            "timedOut": false,
            "duration": 368,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c80c8905-25d4-44db-863e-a5d7286f5f42",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the ecosystem exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
            "timedOut": false,
            "duration": 304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Ecosystem exists');\n    assert.equal(value.body.id, ecosystemId, 'Ecosystem ID matches the created ecosystem ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "176c94aa-046b-4784-8032-f33485cdcb76",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
            "timedOut": false,
            "duration": 295,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8799c404-3253-4276-83ae-c8d42122b109",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the environment exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
            "timedOut": false,
            "duration": 422,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.info(environmentId).then(function (value) {\n    assert.equal(value.status, 200, 'Environment exists');\n    assert.equal(value.body.id, environmentId, 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "083dc9e7-570d-43d1-8e4f-84801ba4388e",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
            "timedOut": false,
            "duration": 328,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "828c2342-fcf4-4cda-987c-b64eec550ad9",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the device exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.equal(value.body.id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "45ebc28f-aaf7-41d5-a2ff-034b4df182e6",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Set a service property on a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
            "timedOut": false,
            "duration": 419,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the device');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a831d904-cff8-418e-ad8b-ab07ceb2c3c2",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the property value has changed",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
            "timedOut": false,
            "duration": 306,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Service property exists on device 1');\n    assert.equal(value.body.items[0].value, 'on', 'Service property value on the device successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d00bd265-6a26-423b-885d-8ddce949b3c6",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Update the device record",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
            "timedOut": false,
            "duration": 369,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4ce1b3aa-db80-434e-8b1a-b7d3718c42ea",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the record has been updated",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
            "timedOut": false,
            "duration": 299,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device 1 exists');\n    assert.equal(value.body.meta.$label, 'New Label', 'Device record successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ef1b1bc9-e0f7-4862-9584-844bd1c2d00a",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create and add a second device to the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
            "timedOut": false,
            "duration": 307,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8126d69a-29d6-4cf2-94a2-f4868ed8817a",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Set a service property on the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
            "timedOut": false,
            "duration": 676,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the environment');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "da4da1d5-e647-4a94-bbcd-7e6120692a63",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the property has been set on both devices",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
            "timedOut": false,
            "duration": 5002,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists on device' + (index + 1));\n        assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device' + (index + 1));\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 2, 'Both devices successfully checked');\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "5cafca90-8bcc-462c-bae2-1855ebd1622e",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create a third device in the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
            "timedOut": false,
            "duration": 308,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1bc10953-5bae-4c0c-9954-fbb8e14034eb",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6e565a6f-d4b4-449c-aabc-466334556cfa",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the zone exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.info(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.id, zoneId, 'Zone ID matches the created zone ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cbed2ed7-1ad0-4ec6-87fc-836097f0fe4b",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone, add the second device to the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
            "timedOut": false,
            "duration": 5008,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        assert.equal(value.status, 201, 'Device ' + (index + 1) + ' successfully added to the zone');\n        devicesAdded++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesAdded, 2, 'Both devices successfully added to the zone');\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "be11f387-a61e-43c5-b7c8-1dc138e09d1b",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that both devices and no others are in the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.items.length, 2, 'Zone contains 2 items');\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        assert.equal(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        }), true, 'Zone contains device ' + (index + 1));\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "81eb27cf-0993-44b5-ba27-662d6b3a57ac",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Set a service property on the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
            "timedOut": false,
            "duration": 584,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "42608617-bd08-484b-a586-1d255352dfe6",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that device 1 and 2 have the property set, but not device 3",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
            "timedOut": false,
            "duration": 5003,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists');\n        if (index === 2) {\n            assert.equal(value.body.items.length, 0, 'Service property not set on device 3');\n        }\n        else {\n            assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device ' + (index + 1));\n        }\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 3, 'All devices successfully checked');\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "9bdff961-c9e9-475a-8845-da8e23e4de14",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
            "timedOut": false,
            "duration": 368,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c80c8905-25d4-44db-863e-a5d7286f5f42",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the ecosystem exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
            "timedOut": false,
            "duration": 304,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Ecosystem exists');\n    assert.equal(value.body.id, ecosystemId, 'Ecosystem ID matches the created ecosystem ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "176c94aa-046b-4784-8032-f33485cdcb76",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
            "timedOut": false,
            "duration": 295,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8799c404-3253-4276-83ae-c8d42122b109",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the environment exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
            "timedOut": false,
            "duration": 422,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.info(environmentId).then(function (value) {\n    assert.equal(value.status, 200, 'Environment exists');\n    assert.equal(value.body.id, environmentId, 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "083dc9e7-570d-43d1-8e4f-84801ba4388e",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
            "timedOut": false,
            "duration": 328,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "828c2342-fcf4-4cda-987c-b64eec550ad9",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the device exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.equal(value.body.id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "45ebc28f-aaf7-41d5-a2ff-034b4df182e6",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Set a service property on a virtual device",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
            "timedOut": false,
            "duration": 419,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the device');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a831d904-cff8-418e-ad8b-ab07ceb2c3c2",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the property value has changed",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
            "timedOut": false,
            "duration": 306,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Service property exists on device 1');\n    assert.equal(value.body.items[0].value, 'on', 'Service property value on the device successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d00bd265-6a26-423b-885d-8ddce949b3c6",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Update the device record",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
            "timedOut": false,
            "duration": 369,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4ce1b3aa-db80-434e-8b1a-b7d3718c42ea",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the record has been updated",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
            "timedOut": false,
            "duration": 299,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device 1 exists');\n    assert.equal(value.body.meta.$label, 'New Label', 'Device record successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ef1b1bc9-e0f7-4862-9584-844bd1c2d00a",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create and add a second device to the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
            "timedOut": false,
            "duration": 307,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8126d69a-29d6-4cf2-94a2-f4868ed8817a",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Set a service property on the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
            "timedOut": false,
            "duration": 676,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the environment');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "da4da1d5-e647-4a94-bbcd-7e6120692a63",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the property has been set on both devices",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
            "timedOut": false,
            "duration": 5002,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists on device' + (index + 1));\n        assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device' + (index + 1));\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 2, 'Both devices successfully checked');\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "5cafca90-8bcc-462c-bae2-1855ebd1622e",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create a third device in the environment",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
            "timedOut": false,
            "duration": 308,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1bc10953-5bae-4c0c-9954-fbb8e14034eb",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6e565a6f-d4b4-449c-aabc-466334556cfa",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that the zone exists",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.info(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.id, zoneId, 'Zone ID matches the created zone ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cbed2ed7-1ad0-4ec6-87fc-836097f0fe4b",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone, add the second device to the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
            "timedOut": false,
            "duration": 5008,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        assert.equal(value.status, 201, 'Device ' + (index + 1) + ' successfully added to the zone');\n        devicesAdded++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesAdded, 2, 'Both devices successfully added to the zone');\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "be11f387-a61e-43c5-b7c8-1dc138e09d1b",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that both devices and no others are in the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
            "timedOut": false,
            "duration": 265,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.items.length, 2, 'Zone contains 2 items');\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        assert.equal(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        }), true, 'Zone contains device ' + (index + 1));\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "81eb27cf-0993-44b5-ba27-662d6b3a57ac",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Set a service property on the zone",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
            "timedOut": false,
            "duration": 584,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "42608617-bd08-484b-a586-1d255352dfe6",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          },
          {
            "title": "Verify that device 1 and 2 have the property set, but not device 3",
            "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
            "timedOut": false,
            "duration": 5003,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists');\n        if (index === 2) {\n            assert.equal(value.body.items.length, 0, 'Service property not set on device 3');\n        }\n        else {\n            assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device ' + (index + 1));\n        }\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 3, 'All devices successfully checked');\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "9bdff961-c9e9-475a-8845-da8e23e4de14",
            "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 20,
        "totalPasses": 20,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 21082,
        "rootEmpty": false
      },
      {
        "title": "Edge Device, Websockets, and Webhooks",
        "suites": [],
        "tests": [
          {
            "title": "Setup webhook",
            "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    assert.equal(value.status, 201, 'Webhook successfully created');\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f4468111-3bef-4532-8d39-5b5d03049943",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Verify webhook is valid",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
            "timedOut": false,
            "duration": 739,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    assert.equal(value.status, 200, 'Webhook verified');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cd79f750-a7da-456f-bc8e-7b9e6c6bcba6",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Get the environment from the running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
            "timedOut": false,
            "duration": 277,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'There is at least one environment');\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b2895113-a647-453e-9aed-a5cd5e0cac8a",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Identify devices that have been created by running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
            "timedOut": false,
            "duration": 401,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.list(environmentId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'Edge server has detected devices');\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cefe2771-8533-477d-8c62-a70f20c0b67c",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Set a property on a device",
            "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "356b593e-342e-48e4-a39f-f9a4e9c612a8",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = false",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c7c0c3c9-a161-493b-ba30-e14bcffb8af2",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = true",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
            "timedOut": true,
            "duration": 10001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
            },
            "isRoot": false,
            "uuid": "e34fa40d-acdb-48b0-b1db-8c8706d52d75",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Test set and changed messages",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
            "timedOut": false,
            "duration": 5030,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketSet, 'Set message recieved from websocket');\n        assert.ok(websocketChanged, 'Changed message recieved from websocket');\n        assert.ok(webhookSet, 'Set message received from webhook');\n        assert.ok(webhookChanged, 'Changed message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "ca49c802-9994-49f1-8e45-400c85d109bc",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Test service methods and events",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
            "timedOut": false,
            "duration": 5003,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketCall, 'Call message recieved from websocket');\n        assert.ok(websocketEvent, 'Event message recieved from websocket');\n        assert.ok(webhookCall, 'Call message received from webhook');\n        assert.ok(webhookEvent, 'Event message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "334390f2-c4b3-4416-83ac-93223d197725",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Setup webhook",
            "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
            "timedOut": false,
            "duration": 188,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    assert.equal(value.status, 201, 'Webhook successfully created');\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f4468111-3bef-4532-8d39-5b5d03049943",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Verify webhook is valid",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
            "timedOut": false,
            "duration": 739,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    assert.equal(value.status, 200, 'Webhook verified');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cd79f750-a7da-456f-bc8e-7b9e6c6bcba6",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Get the environment from the running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
            "timedOut": false,
            "duration": 277,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'There is at least one environment');\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b2895113-a647-453e-9aed-a5cd5e0cac8a",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Identify devices that have been created by running edge server",
            "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
            "timedOut": false,
            "duration": 401,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.list(environmentId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'Edge server has detected devices');\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "cefe2771-8533-477d-8c62-a70f20c0b67c",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Set a property on a device",
            "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
            "timedOut": false,
            "duration": 276,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "356b593e-342e-48e4-a39f-f9a4e9c612a8",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Verify the property has been set using refresh = false",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
            "timedOut": false,
            "duration": 255,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c7c0c3c9-a161-493b-ba30-e14bcffb8af2",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Test set and changed messages",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
            "timedOut": false,
            "duration": 5030,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketSet, 'Set message recieved from websocket');\n        assert.ok(websocketChanged, 'Changed message recieved from websocket');\n        assert.ok(webhookSet, 'Set message received from webhook');\n        assert.ok(webhookChanged, 'Changed message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "ca49c802-9994-49f1-8e45-400c85d109bc",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          },
          {
            "title": "Test service methods and events",
            "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
            "timedOut": false,
            "duration": 5003,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketCall, 'Call message recieved from websocket');\n        assert.ok(websocketEvent, 'Event message recieved from websocket');\n        assert.ok(webhookCall, 'Call message received from webhook');\n        assert.ok(webhookEvent, 'Event message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
            "err": {},
            "isRoot": false,
            "uuid": "334390f2-c4b3-4416-83ac-93223d197725",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "Verify the property has been set using refresh = true",
            "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
            "timedOut": true,
            "duration": 10001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
            },
            "isRoot": false,
            "uuid": "e34fa40d-acdb-48b0-b1db-8c8706d52d75",
            "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 8,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 22170,
        "rootEmpty": false
      },
      {
        "title": "History",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "History Create an ecosystem",
            "timedOut": false,
            "duration": 285,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f3938036-b203-4af4-8569-0e83e7548057",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "History Create an environment",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "58eb142d-269c-43d8-ab53-f9275e1bd858",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "History Create a virtual device",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1bb4213f-5681-45d9-9c7b-9ff97c331768",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 324,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b0f442f4-f355-42f7-a8dd-22b14c2ac293",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 416,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9cdbec1f-069e-4e91-a82a-899f0a56974d",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Call a service method on the device",
            "fullTitle": "History Call a service method on the device",
            "timedOut": false,
            "duration": 306,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    assert.equal(value.status, 200, 'Service method successfully called');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "987deead-7b51-4e3a-aae7-dc0ec2b212a4",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Verify device history is correct",
            "fullTitle": "History Verify device history is correct",
            "timedOut": false,
            "duration": 309,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Device history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1323ca90-fab3-42ec-b1c7-c1efe5a3b5a3",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Verify environment history is correct",
            "fullTitle": "History Verify environment history is correct",
            "timedOut": false,
            "duration": 321,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Environment history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5654aa5b-2b4f-4e82-aefe-ba29f1f05fdc",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "History Create an ecosystem",
            "timedOut": false,
            "duration": 285,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f3938036-b203-4af4-8569-0e83e7548057",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "History Create an environment",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "58eb142d-269c-43d8-ab53-f9275e1bd858",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Create a virtual device",
            "fullTitle": "History Create a virtual device",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1bb4213f-5681-45d9-9c7b-9ff97c331768",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 324,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b0f442f4-f355-42f7-a8dd-22b14c2ac293",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Turn a service property on",
            "fullTitle": "History Turn a service property on",
            "timedOut": false,
            "duration": 416,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9cdbec1f-069e-4e91-a82a-899f0a56974d",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Call a service method on the device",
            "fullTitle": "History Call a service method on the device",
            "timedOut": false,
            "duration": 306,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    assert.equal(value.status, 200, 'Service method successfully called');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "987deead-7b51-4e3a-aae7-dc0ec2b212a4",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Verify device history is correct",
            "fullTitle": "History Verify device history is correct",
            "timedOut": false,
            "duration": 309,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Device history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1323ca90-fab3-42ec-b1c7-c1efe5a3b5a3",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          },
          {
            "title": "Verify environment history is correct",
            "fullTitle": "History Verify environment history is correct",
            "timedOut": false,
            "duration": 321,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Environment history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5654aa5b-2b4f-4e82-aefe-ba29f1f05fdc",
            "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 8,
        "totalPasses": 8,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2493,
        "rootEmpty": false
      },
      {
        "title": "Users",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Users Create an ecosystem",
            "timedOut": false,
            "duration": 335,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "44dd6e50-c77b-4ef1-b1cd-cf9b2adc0192",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Users Create an environment",
            "timedOut": false,
            "duration": 288,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "be9d5d7f-893a-4aa1-bbed-0be6512485e1",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create another environment",
            "fullTitle": "Users Create another environment",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ea80529f-e77a-44dd-a52d-e0f7635a21e6",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the first environment",
            "fullTitle": "Users Create a virtual device in the first environment",
            "timedOut": false,
            "duration": 284,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "308ab27e-3034-4b2d-9b9d-3887fdbe527a",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the second environment",
            "fullTitle": "Users Create a virtual device in the second environment",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c9bda3e6-4ed2-47fa-aa0e-6cf48de8c853",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a user and grant access to the first environment",
            "fullTitle": "Users Create a user and grant access to the first environment",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    assert.equal(value.status, 201, 'User successfully created');\n    assert.ok(value.body.token, 'User has a token');\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "791dd5c8-d5fa-4b20-beed-8afc8212c6c3",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to list ecosystems",
            "fullTitle": "Users Fail to list ecosystems",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.list().then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dcbd298d-f3bc-4a99-8f34-72b1b3964309",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "List environments",
            "fullTitle": "Users List environments",
            "timedOut": false,
            "duration": 370,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Environments successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one environment listed');\n    assert.equal(value.body.items[0].id, environmentIds[0], 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "500",
              "expected": "200",
              "operator": "==",
              "message": "Environments successfully retrieved",
              "generatedMessage": false,
              "estack": "AssertionError: Environments successfully retrieved\n    at projects\\test\\lib\\test.js:704:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 500\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "06f80473-3c21-4ab3-aa19-428651601106",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "List devices",
            "fullTitle": "Users List devices",
            "timedOut": false,
            "duration": 258,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Devices successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one device listed');\n    assert.equal(value.body.items[0].id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Devices successfully retrieved",
              "generatedMessage": false,
              "estack": "AssertionError: Devices successfully retrieved\n    at projects\\test\\lib\\test.js:714:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "1aea74ea-c333-4435-b5a0-da85c4f39c05",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to list devices in the second environment",
            "fullTitle": "Users Fail to list devices in the second environment",
            "timedOut": false,
            "duration": 274,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": null,
              "expected": "Token type not permitted!",
              "operator": "==",
              "message": "User does not have access",
              "generatedMessage": false,
              "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:724:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "d8639c63-c9dc-4954-bfea-20c51153eebf",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Set device service property",
            "fullTitle": "Users Set device service property",
            "timedOut": false,
            "duration": 282,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Service property successfully set",
              "generatedMessage": false,
              "estack": "AssertionError: Service property successfully set\n    at projects\\test\\lib\\test.js:734:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "fe2356df-51a2-44f0-9fd6-110c27c14b9d",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Update device record",
            "fullTitle": "Users Update device record",
            "timedOut": false,
            "duration": 247,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Device record successfully updated",
              "generatedMessage": false,
              "estack": "AssertionError: Device record successfully updated\n    at projects\\test\\lib\\test.js:746:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "c4e6c872-2a97-45f2-82a9-584bef0aff17",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Users Create a zone",
            "timedOut": false,
            "duration": 260,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "201",
              "operator": "==",
              "message": "Zone successfully created",
              "generatedMessage": false,
              "estack": "AssertionError: Zone successfully created\n    at projects\\test\\lib\\test.js:754:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 201\n"
            },
            "isRoot": false,
            "uuid": "e1dbb68b-189e-4f2d-ba7f-82e634f4c956",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone",
            "fullTitle": "Users Add the first device to the zone",
            "timedOut": false,
            "duration": 261,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully added to the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "400",
              "expected": "201",
              "operator": "==",
              "message": "Device successfully added to the zone",
              "generatedMessage": false,
              "estack": "AssertionError: Device successfully added to the zone\n    at projects\\test\\lib\\test.js:764:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 201\n"
            },
            "isRoot": false,
            "uuid": "853d3ce1-9f34-4e19-af0e-80121ce05e3f",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to add the second device to the zone",
            "fullTitle": "Users Fail to add the second device to the zone",
            "timedOut": false,
            "duration": 388,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": {
                "errorType": "InvalidParams",
                "errors": [
                  {
                    "in": "path",
                    "message": "invalid id",
                    "path": "id"
                  }
                ]
              },
              "expected": "Token type not permitted!",
              "operator": "==",
              "message": "User does not have access",
              "generatedMessage": false,
              "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:772:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "91b9b332-4bdc-4163-98ee-208bfd8c0cdc",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to delete the ecosystem",
            "fullTitle": "Users Fail to delete the ecosystem",
            "timedOut": false,
            "duration": 263,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4210794b-dfd7-48f8-8295-b702dce857b7",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Delete the first device",
            "fullTitle": "Users Delete the first device",
            "timedOut": false,
            "duration": 279,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Device successfully deleted",
              "generatedMessage": false,
              "estack": "AssertionError: Device successfully deleted\n    at projects\\test\\lib\\test.js:788:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "45ff2fbf-c116-441f-a9a5-626a58eaff20",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Delete the first environment",
            "fullTitle": "Users Delete the first environment",
            "timedOut": false,
            "duration": 275,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Environment successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Environment successfully deleted",
              "generatedMessage": false,
              "estack": "AssertionError: Environment successfully deleted\n    at projects\\test\\lib\\test.js:796:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "c9afaef1-c473-4583-9a12-ffe25327498c",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Users Create an ecosystem",
            "timedOut": false,
            "duration": 335,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "44dd6e50-c77b-4ef1-b1cd-cf9b2adc0192",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create an environment",
            "fullTitle": "Users Create an environment",
            "timedOut": false,
            "duration": 288,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "be9d5d7f-893a-4aa1-bbed-0be6512485e1",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create another environment",
            "fullTitle": "Users Create another environment",
            "timedOut": false,
            "duration": 258,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ea80529f-e77a-44dd-a52d-e0f7635a21e6",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the first environment",
            "fullTitle": "Users Create a virtual device in the first environment",
            "timedOut": false,
            "duration": 284,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "308ab27e-3034-4b2d-9b9d-3887fdbe527a",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a virtual device in the second environment",
            "fullTitle": "Users Create a virtual device in the second environment",
            "timedOut": false,
            "duration": 266,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c9bda3e6-4ed2-47fa-aa0e-6cf48de8c853",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a user and grant access to the first environment",
            "fullTitle": "Users Create a user and grant access to the first environment",
            "timedOut": false,
            "duration": 275,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    assert.equal(value.status, 201, 'User successfully created');\n    assert.ok(value.body.token, 'User has a token');\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "791dd5c8-d5fa-4b20-beed-8afc8212c6c3",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to list ecosystems",
            "fullTitle": "Users Fail to list ecosystems",
            "timedOut": false,
            "duration": 267,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.list().then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dcbd298d-f3bc-4a99-8f34-72b1b3964309",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to delete the ecosystem",
            "fullTitle": "Users Fail to delete the ecosystem",
            "timedOut": false,
            "duration": 263,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "4210794b-dfd7-48f8-8295-b702dce857b7",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "List environments",
            "fullTitle": "Users List environments",
            "timedOut": false,
            "duration": 370,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Environments successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one environment listed');\n    assert.equal(value.body.items[0].id, environmentIds[0], 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "500",
              "expected": "200",
              "operator": "==",
              "message": "Environments successfully retrieved",
              "generatedMessage": false,
              "estack": "AssertionError: Environments successfully retrieved\n    at projects\\test\\lib\\test.js:704:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 500\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "06f80473-3c21-4ab3-aa19-428651601106",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "List devices",
            "fullTitle": "Users List devices",
            "timedOut": false,
            "duration": 258,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Devices successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one device listed');\n    assert.equal(value.body.items[0].id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Devices successfully retrieved",
              "generatedMessage": false,
              "estack": "AssertionError: Devices successfully retrieved\n    at projects\\test\\lib\\test.js:714:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "1aea74ea-c333-4435-b5a0-da85c4f39c05",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to list devices in the second environment",
            "fullTitle": "Users Fail to list devices in the second environment",
            "timedOut": false,
            "duration": 274,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": null,
              "expected": "Token type not permitted!",
              "operator": "==",
              "message": "User does not have access",
              "generatedMessage": false,
              "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:724:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "d8639c63-c9dc-4954-bfea-20c51153eebf",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Set device service property",
            "fullTitle": "Users Set device service property",
            "timedOut": false,
            "duration": 282,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Service property successfully set",
              "generatedMessage": false,
              "estack": "AssertionError: Service property successfully set\n    at projects\\test\\lib\\test.js:734:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "fe2356df-51a2-44f0-9fd6-110c27c14b9d",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Update device record",
            "fullTitle": "Users Update device record",
            "timedOut": false,
            "duration": 247,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Device record successfully updated",
              "generatedMessage": false,
              "estack": "AssertionError: Device record successfully updated\n    at projects\\test\\lib\\test.js:746:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "c4e6c872-2a97-45f2-82a9-584bef0aff17",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Create a zone",
            "fullTitle": "Users Create a zone",
            "timedOut": false,
            "duration": 260,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "201",
              "operator": "==",
              "message": "Zone successfully created",
              "generatedMessage": false,
              "estack": "AssertionError: Zone successfully created\n    at projects\\test\\lib\\test.js:754:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 201\n"
            },
            "isRoot": false,
            "uuid": "e1dbb68b-189e-4f2d-ba7f-82e634f4c956",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Add the first device to the zone",
            "fullTitle": "Users Add the first device to the zone",
            "timedOut": false,
            "duration": 261,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully added to the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "400",
              "expected": "201",
              "operator": "==",
              "message": "Device successfully added to the zone",
              "generatedMessage": false,
              "estack": "AssertionError: Device successfully added to the zone\n    at projects\\test\\lib\\test.js:764:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 400\n+ 201\n"
            },
            "isRoot": false,
            "uuid": "853d3ce1-9f34-4e19-af0e-80121ce05e3f",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Fail to add the second device to the zone",
            "fullTitle": "Users Fail to add the second device to the zone",
            "timedOut": false,
            "duration": 388,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": {
                "errorType": "InvalidParams",
                "errors": [
                  {
                    "in": "path",
                    "message": "invalid id",
                    "path": "id"
                  }
                ]
              },
              "expected": "Token type not permitted!",
              "operator": "==",
              "message": "User does not have access",
              "generatedMessage": false,
              "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:772:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
            },
            "isRoot": false,
            "uuid": "91b9b332-4bdc-4163-98ee-208bfd8c0cdc",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Delete the first device",
            "fullTitle": "Users Delete the first device",
            "timedOut": false,
            "duration": 279,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Device successfully deleted",
              "generatedMessage": false,
              "estack": "AssertionError: Device successfully deleted\n    at projects\\test\\lib\\test.js:788:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "45ff2fbf-c116-441f-a9a5-626a58eaff20",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          },
          {
            "title": "Delete the first environment",
            "fullTitle": "Users Delete the first environment",
            "timedOut": false,
            "duration": 275,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Environment successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {
              "name": "AssertionError",
              "actual": "403",
              "expected": "200",
              "operator": "==",
              "message": "Environment successfully deleted",
              "generatedMessage": false,
              "estack": "AssertionError: Environment successfully deleted\n    at projects\\test\\lib\\test.js:796:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
              "diff": "- 403\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "c9afaef1-c473-4583-9a12-ffe25327498c",
            "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
            "skipped": false
          }
        ],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 18,
        "totalPasses": 8,
        "totalFailures": 10,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5130,
        "rootEmpty": false
      },
      {
        "title": "Clients",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Clients Create an ecosystem",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e52ceec2-737c-408b-a402-dadc758fe5cf",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Create a client",
            "fullTitle": "Clients Create a client",
            "timedOut": false,
            "duration": 560,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    assert.equal(value.status, 201, 'Client successfully created');\n    clientId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "09eb3631-5afd-4dff-b6b2-758dd1d765c6",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the client exists",
            "fullTitle": "Clients Verify the client exists",
            "timedOut": false,
            "duration": 278,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "674945c4-6da1-409d-9413-2718b108a037",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Update the client info",
            "fullTitle": "Clients Update the client info",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Client info successfully updated');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "556142e7-5b0d-4a79-82cc-a03fc0fe836e",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the client info has been updated",
            "fullTitle": "Clients Verify the client info has been updated",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    assert.equal(value.body.name, 'Test Client', 'Client info successfully changed');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a1e2e6dc-9573-4dea-974a-970c7b06ba1b",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Create a client token",
            "fullTitle": "Clients Create a client token",
            "timedOut": false,
            "duration": 271,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.create(clientId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully created');\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "80a9df67-0d45-4a5d-8208-01ba7f8ab2c8",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the token exists",
            "fullTitle": "Clients Verify the token exists",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d4090a55-37ff-4416-b0bb-3e5bca971668",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Update the token record",
            "fullTitle": "Clients Update the token record",
            "timedOut": false,
            "duration": 584,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Token record successfully updated');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fda234e0-fa5d-414c-8461-f6bb2f79c32d",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the token record has been updated",
            "fullTitle": "Clients Verify the token record has been updated",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    assert.equal(value.body.description, 'Primary access token', 'Token record successfully changed');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b1c13a11-5699-4703-8e3c-eb5e0fd89166",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Regenerate the client token and verify it is different",
            "fullTitle": "Clients Regenerate the client token and verify it is different",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully regenerated');\n    assert.notEqual(value.body.token, token, 'Token successfully changed');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7f5113ba-67d9-4a0a-9309-1681ed372fad",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Clients Create an ecosystem",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e52ceec2-737c-408b-a402-dadc758fe5cf",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Create a client",
            "fullTitle": "Clients Create a client",
            "timedOut": false,
            "duration": 560,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    assert.equal(value.status, 201, 'Client successfully created');\n    clientId = value.body.id;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "09eb3631-5afd-4dff-b6b2-758dd1d765c6",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the client exists",
            "fullTitle": "Clients Verify the client exists",
            "timedOut": false,
            "duration": 278,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "674945c4-6da1-409d-9413-2718b108a037",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Update the client info",
            "fullTitle": "Clients Update the client info",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Client info successfully updated');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "556142e7-5b0d-4a79-82cc-a03fc0fe836e",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the client info has been updated",
            "fullTitle": "Clients Verify the client info has been updated",
            "timedOut": false,
            "duration": 262,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    assert.equal(value.body.name, 'Test Client', 'Client info successfully changed');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a1e2e6dc-9573-4dea-974a-970c7b06ba1b",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Create a client token",
            "fullTitle": "Clients Create a client token",
            "timedOut": false,
            "duration": 271,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.create(clientId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully created');\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "80a9df67-0d45-4a5d-8208-01ba7f8ab2c8",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the token exists",
            "fullTitle": "Clients Verify the token exists",
            "timedOut": false,
            "duration": 279,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "d4090a55-37ff-4416-b0bb-3e5bca971668",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Update the token record",
            "fullTitle": "Clients Update the token record",
            "timedOut": false,
            "duration": 584,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Token record successfully updated');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "fda234e0-fa5d-414c-8461-f6bb2f79c32d",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Verify the token record has been updated",
            "fullTitle": "Clients Verify the token record has been updated",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    assert.equal(value.body.description, 'Primary access token', 'Token record successfully changed');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b1c13a11-5699-4703-8e3c-eb5e0fd89166",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          },
          {
            "title": "Regenerate the client token and verify it is different",
            "fullTitle": "Clients Regenerate the client token and verify it is different",
            "timedOut": false,
            "duration": 261,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully regenerated');\n    assert.notEqual(value.body.token, token, 'Token successfully changed');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "7f5113ba-67d9-4a0a-9309-1681ed372fad",
            "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 10,
        "totalPasses": 10,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3290,
        "rootEmpty": false
      },
      {
        "title": "Service classes",
        "suites": [],
        "tests": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Service classes Create an ecosystem",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "31b37074-7bc4-484d-adb6-d59509230129",
            "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
            "skipped": false
          },
          {
            "title": "Create a new service class",
            "fullTitle": "Service classes Create a new service class",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    assert.equal(value.status, 201, 'Service class successfully created');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "48e70abd-d5fa-468f-a252-b88643ebbd4b",
            "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
            "skipped": false
          },
          {
            "title": "Verify the service class exists",
            "fullTitle": "Service classes Verify the service class exists",
            "timedOut": false,
            "duration": 576,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Service classes successfully listed');\n    assert.equal(value.body.items.length, 1, 'Exactly one service class exists');\n    assert.equal(value.body.items[0].name, 'Test', 'Service class name matches the created service class name');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "36abd0da-a35c-4921-9f44-6a076d4f77bc",
            "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 10000,
        "file": "\\projects\\test\\lib\\test.js",
        "uuid": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
        "fullFile": "C:\\Users\\leshr\\droplit.io-edge\\projects\\test\\lib\\test.js",
        "passes": [
          {
            "title": "Create an ecosystem",
            "fullTitle": "Service classes Create an ecosystem",
            "timedOut": false,
            "duration": 310,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "31b37074-7bc4-484d-adb6-d59509230129",
            "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
            "skipped": false
          },
          {
            "title": "Create a new service class",
            "fullTitle": "Service classes Create a new service class",
            "timedOut": false,
            "duration": 269,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    assert.equal(value.status, 201, 'Service class successfully created');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "48e70abd-d5fa-468f-a252-b88643ebbd4b",
            "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
            "skipped": false
          },
          {
            "title": "Verify the service class exists",
            "fullTitle": "Service classes Verify the service class exists",
            "timedOut": false,
            "duration": 576,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Service classes successfully listed');\n    assert.equal(value.body.items.length, 1, 'Exactly one service class exists');\n    assert.equal(value.body.items[0].name, 'Test', 'Service class name matches the created service class name');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "36abd0da-a35c-4921-9f44-6a076d4f77bc",
            "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1155,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "719d3946-b685-46d2-83d0-56ff1a863804",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Create an ecosystem",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
      "timedOut": false,
      "duration": 368,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c80c8905-25d4-44db-863e-a5d7286f5f42",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the ecosystem exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
      "timedOut": false,
      "duration": 304,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Ecosystem exists');\n    assert.equal(value.body.id, ecosystemId, 'Ecosystem ID matches the created ecosystem ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "176c94aa-046b-4784-8032-f33485cdcb76",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
      "timedOut": false,
      "duration": 295,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8799c404-3253-4276-83ae-c8d42122b109",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the environment exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
      "timedOut": false,
      "duration": 422,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.info(environmentId).then(function (value) {\n    assert.equal(value.status, 200, 'Environment exists');\n    assert.equal(value.body.id, environmentId, 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "083dc9e7-570d-43d1-8e4f-84801ba4388e",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
      "timedOut": false,
      "duration": 328,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "828c2342-fcf4-4cda-987c-b64eec550ad9",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the device exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
      "timedOut": false,
      "duration": 279,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.equal(value.body.id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "45ebc28f-aaf7-41d5-a2ff-034b4df182e6",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Set a service property on a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
      "timedOut": false,
      "duration": 419,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the device');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a831d904-cff8-418e-ad8b-ab07ceb2c3c2",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the property value has changed",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
      "timedOut": false,
      "duration": 306,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Service property exists on device 1');\n    assert.equal(value.body.items[0].value, 'on', 'Service property value on the device successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d00bd265-6a26-423b-885d-8ddce949b3c6",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Update the device record",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
      "timedOut": false,
      "duration": 369,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4ce1b3aa-db80-434e-8b1a-b7d3718c42ea",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the record has been updated",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
      "timedOut": false,
      "duration": 299,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device 1 exists');\n    assert.equal(value.body.meta.$label, 'New Label', 'Device record successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ef1b1bc9-e0f7-4862-9584-844bd1c2d00a",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create and add a second device to the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
      "timedOut": false,
      "duration": 307,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8126d69a-29d6-4cf2-94a2-f4868ed8817a",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Set a service property on the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
      "timedOut": false,
      "duration": 676,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the environment');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "da4da1d5-e647-4a94-bbcd-7e6120692a63",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the property has been set on both devices",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
      "timedOut": false,
      "duration": 5002,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists on device' + (index + 1));\n        assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device' + (index + 1));\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 2, 'Both devices successfully checked');\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "5cafca90-8bcc-462c-bae2-1855ebd1622e",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create a third device in the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
      "timedOut": false,
      "duration": 308,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1bc10953-5bae-4c0c-9954-fbb8e14034eb",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
      "timedOut": false,
      "duration": 276,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6e565a6f-d4b4-449c-aabc-466334556cfa",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the zone exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
      "timedOut": false,
      "duration": 264,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.info(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.id, zoneId, 'Zone ID matches the created zone ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cbed2ed7-1ad0-4ec6-87fc-836097f0fe4b",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone, add the second device to the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
      "timedOut": false,
      "duration": 5008,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        assert.equal(value.status, 201, 'Device ' + (index + 1) + ' successfully added to the zone');\n        devicesAdded++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesAdded, 2, 'Both devices successfully added to the zone');\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "be11f387-a61e-43c5-b7c8-1dc138e09d1b",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that both devices and no others are in the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.items.length, 2, 'Zone contains 2 items');\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        assert.equal(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        }), true, 'Zone contains device ' + (index + 1));\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "81eb27cf-0993-44b5-ba27-662d6b3a57ac",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Set a service property on the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
      "timedOut": false,
      "duration": 584,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "42608617-bd08-484b-a586-1d255352dfe6",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that device 1 and 2 have the property set, but not device 3",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
      "timedOut": false,
      "duration": 5003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists');\n        if (index === 2) {\n            assert.equal(value.body.items.length, 0, 'Service property not set on device 3');\n        }\n        else {\n            assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device ' + (index + 1));\n        }\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 3, 'All devices successfully checked');\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "9bdff961-c9e9-475a-8845-da8e23e4de14",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Setup webhook",
      "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
      "timedOut": false,
      "duration": 188,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    assert.equal(value.status, 201, 'Webhook successfully created');\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f4468111-3bef-4532-8d39-5b5d03049943",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Verify webhook is valid",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
      "timedOut": false,
      "duration": 739,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    assert.equal(value.status, 200, 'Webhook verified');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cd79f750-a7da-456f-bc8e-7b9e6c6bcba6",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Get the environment from the running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
      "timedOut": false,
      "duration": 277,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'There is at least one environment');\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b2895113-a647-453e-9aed-a5cd5e0cac8a",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Identify devices that have been created by running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
      "timedOut": false,
      "duration": 401,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.list(environmentId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'Edge server has detected devices');\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cefe2771-8533-477d-8c62-a70f20c0b67c",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Set a property on a device",
      "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
      "timedOut": false,
      "duration": 276,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "356b593e-342e-48e4-a39f-f9a4e9c612a8",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = false",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c7c0c3c9-a161-493b-ba30-e14bcffb8af2",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = true",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
      "timedOut": true,
      "duration": 10001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "e34fa40d-acdb-48b0-b1db-8c8706d52d75",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Test set and changed messages",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
      "timedOut": false,
      "duration": 5030,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketSet, 'Set message recieved from websocket');\n        assert.ok(websocketChanged, 'Changed message recieved from websocket');\n        assert.ok(webhookSet, 'Set message received from webhook');\n        assert.ok(webhookChanged, 'Changed message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "ca49c802-9994-49f1-8e45-400c85d109bc",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Test service methods and events",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
      "timedOut": false,
      "duration": 5003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketCall, 'Call message recieved from websocket');\n        assert.ok(websocketEvent, 'Event message recieved from websocket');\n        assert.ok(webhookCall, 'Call message received from webhook');\n        assert.ok(webhookEvent, 'Event message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "334390f2-c4b3-4416-83ac-93223d197725",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "History Create an ecosystem",
      "timedOut": false,
      "duration": 285,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f3938036-b203-4af4-8569-0e83e7548057",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "History Create an environment",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "58eb142d-269c-43d8-ab53-f9275e1bd858",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "History Create a virtual device",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1bb4213f-5681-45d9-9c7b-9ff97c331768",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 324,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b0f442f4-f355-42f7-a8dd-22b14c2ac293",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 416,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9cdbec1f-069e-4e91-a82a-899f0a56974d",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Call a service method on the device",
      "fullTitle": "History Call a service method on the device",
      "timedOut": false,
      "duration": 306,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    assert.equal(value.status, 200, 'Service method successfully called');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "987deead-7b51-4e3a-aae7-dc0ec2b212a4",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Verify device history is correct",
      "fullTitle": "History Verify device history is correct",
      "timedOut": false,
      "duration": 309,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Device history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1323ca90-fab3-42ec-b1c7-c1efe5a3b5a3",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Verify environment history is correct",
      "fullTitle": "History Verify environment history is correct",
      "timedOut": false,
      "duration": 321,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Environment history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5654aa5b-2b4f-4e82-aefe-ba29f1f05fdc",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Users Create an ecosystem",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "44dd6e50-c77b-4ef1-b1cd-cf9b2adc0192",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Users Create an environment",
      "timedOut": false,
      "duration": 288,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "be9d5d7f-893a-4aa1-bbed-0be6512485e1",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create another environment",
      "fullTitle": "Users Create another environment",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ea80529f-e77a-44dd-a52d-e0f7635a21e6",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the first environment",
      "fullTitle": "Users Create a virtual device in the first environment",
      "timedOut": false,
      "duration": 284,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "308ab27e-3034-4b2d-9b9d-3887fdbe527a",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the second environment",
      "fullTitle": "Users Create a virtual device in the second environment",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c9bda3e6-4ed2-47fa-aa0e-6cf48de8c853",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a user and grant access to the first environment",
      "fullTitle": "Users Create a user and grant access to the first environment",
      "timedOut": false,
      "duration": 275,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    assert.equal(value.status, 201, 'User successfully created');\n    assert.ok(value.body.token, 'User has a token');\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "791dd5c8-d5fa-4b20-beed-8afc8212c6c3",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to list ecosystems",
      "fullTitle": "Users Fail to list ecosystems",
      "timedOut": false,
      "duration": 267,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.list().then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dcbd298d-f3bc-4a99-8f34-72b1b3964309",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "List environments",
      "fullTitle": "Users List environments",
      "timedOut": false,
      "duration": 370,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Environments successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one environment listed');\n    assert.equal(value.body.items[0].id, environmentIds[0], 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "500",
        "expected": "200",
        "operator": "==",
        "message": "Environments successfully retrieved",
        "generatedMessage": false,
        "estack": "AssertionError: Environments successfully retrieved\n    at projects\\test\\lib\\test.js:704:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 500\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "06f80473-3c21-4ab3-aa19-428651601106",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "List devices",
      "fullTitle": "Users List devices",
      "timedOut": false,
      "duration": 258,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Devices successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one device listed');\n    assert.equal(value.body.items[0].id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Devices successfully retrieved",
        "generatedMessage": false,
        "estack": "AssertionError: Devices successfully retrieved\n    at projects\\test\\lib\\test.js:714:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "1aea74ea-c333-4435-b5a0-da85c4f39c05",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to list devices in the second environment",
      "fullTitle": "Users Fail to list devices in the second environment",
      "timedOut": false,
      "duration": 274,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": null,
        "expected": "Token type not permitted!",
        "operator": "==",
        "message": "User does not have access",
        "generatedMessage": false,
        "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:724:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "d8639c63-c9dc-4954-bfea-20c51153eebf",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Set device service property",
      "fullTitle": "Users Set device service property",
      "timedOut": false,
      "duration": 282,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Service property successfully set",
        "generatedMessage": false,
        "estack": "AssertionError: Service property successfully set\n    at projects\\test\\lib\\test.js:734:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "fe2356df-51a2-44f0-9fd6-110c27c14b9d",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Update device record",
      "fullTitle": "Users Update device record",
      "timedOut": false,
      "duration": 247,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Device record successfully updated",
        "generatedMessage": false,
        "estack": "AssertionError: Device record successfully updated\n    at projects\\test\\lib\\test.js:746:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "c4e6c872-2a97-45f2-82a9-584bef0aff17",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Users Create a zone",
      "timedOut": false,
      "duration": 260,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "201",
        "operator": "==",
        "message": "Zone successfully created",
        "generatedMessage": false,
        "estack": "AssertionError: Zone successfully created\n    at projects\\test\\lib\\test.js:754:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 201\n"
      },
      "isRoot": false,
      "uuid": "e1dbb68b-189e-4f2d-ba7f-82e634f4c956",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone",
      "fullTitle": "Users Add the first device to the zone",
      "timedOut": false,
      "duration": 261,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully added to the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "400",
        "expected": "201",
        "operator": "==",
        "message": "Device successfully added to the zone",
        "generatedMessage": false,
        "estack": "AssertionError: Device successfully added to the zone\n    at projects\\test\\lib\\test.js:764:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 201\n"
      },
      "isRoot": false,
      "uuid": "853d3ce1-9f34-4e19-af0e-80121ce05e3f",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to add the second device to the zone",
      "fullTitle": "Users Fail to add the second device to the zone",
      "timedOut": false,
      "duration": 388,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": {
          "errorType": "InvalidParams",
          "errors": [
            {
              "in": "path",
              "message": "invalid id",
              "path": "id"
            }
          ]
        },
        "expected": "Token type not permitted!",
        "operator": "==",
        "message": "User does not have access",
        "generatedMessage": false,
        "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:772:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "91b9b332-4bdc-4163-98ee-208bfd8c0cdc",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to delete the ecosystem",
      "fullTitle": "Users Fail to delete the ecosystem",
      "timedOut": false,
      "duration": 263,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4210794b-dfd7-48f8-8295-b702dce857b7",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Delete the first device",
      "fullTitle": "Users Delete the first device",
      "timedOut": false,
      "duration": 279,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Device successfully deleted",
        "generatedMessage": false,
        "estack": "AssertionError: Device successfully deleted\n    at projects\\test\\lib\\test.js:788:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "45ff2fbf-c116-441f-a9a5-626a58eaff20",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Delete the first environment",
      "fullTitle": "Users Delete the first environment",
      "timedOut": false,
      "duration": 275,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Environment successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Environment successfully deleted",
        "generatedMessage": false,
        "estack": "AssertionError: Environment successfully deleted\n    at projects\\test\\lib\\test.js:796:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "c9afaef1-c473-4583-9a12-ffe25327498c",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Clients Create an ecosystem",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e52ceec2-737c-408b-a402-dadc758fe5cf",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Create a client",
      "fullTitle": "Clients Create a client",
      "timedOut": false,
      "duration": 560,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    assert.equal(value.status, 201, 'Client successfully created');\n    clientId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "09eb3631-5afd-4dff-b6b2-758dd1d765c6",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the client exists",
      "fullTitle": "Clients Verify the client exists",
      "timedOut": false,
      "duration": 278,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "674945c4-6da1-409d-9413-2718b108a037",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Update the client info",
      "fullTitle": "Clients Update the client info",
      "timedOut": false,
      "duration": 264,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Client info successfully updated');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "556142e7-5b0d-4a79-82cc-a03fc0fe836e",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the client info has been updated",
      "fullTitle": "Clients Verify the client info has been updated",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    assert.equal(value.body.name, 'Test Client', 'Client info successfully changed');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a1e2e6dc-9573-4dea-974a-970c7b06ba1b",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Create a client token",
      "fullTitle": "Clients Create a client token",
      "timedOut": false,
      "duration": 271,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.create(clientId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully created');\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "80a9df67-0d45-4a5d-8208-01ba7f8ab2c8",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the token exists",
      "fullTitle": "Clients Verify the token exists",
      "timedOut": false,
      "duration": 279,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d4090a55-37ff-4416-b0bb-3e5bca971668",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Update the token record",
      "fullTitle": "Clients Update the token record",
      "timedOut": false,
      "duration": 584,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Token record successfully updated');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fda234e0-fa5d-414c-8461-f6bb2f79c32d",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the token record has been updated",
      "fullTitle": "Clients Verify the token record has been updated",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    assert.equal(value.body.description, 'Primary access token', 'Token record successfully changed');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b1c13a11-5699-4703-8e3c-eb5e0fd89166",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Regenerate the client token and verify it is different",
      "fullTitle": "Clients Regenerate the client token and verify it is different",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully regenerated');\n    assert.notEqual(value.body.token, token, 'Token successfully changed');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7f5113ba-67d9-4a0a-9309-1681ed372fad",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Service classes Create an ecosystem",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "31b37074-7bc4-484d-adb6-d59509230129",
      "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
      "skipped": false
    },
    {
      "title": "Create a new service class",
      "fullTitle": "Service classes Create a new service class",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    assert.equal(value.status, 201, 'Service class successfully created');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "48e70abd-d5fa-468f-a252-b88643ebbd4b",
      "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
      "skipped": false
    },
    {
      "title": "Verify the service class exists",
      "fullTitle": "Service classes Verify the service class exists",
      "timedOut": false,
      "duration": 576,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Service classes successfully listed');\n    assert.equal(value.body.items.length, 1, 'Exactly one service class exists');\n    assert.equal(value.body.items[0].name, 'Test', 'Service class name matches the created service class name');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "36abd0da-a35c-4921-9f44-6a076d4f77bc",
      "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Create an ecosystem",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an ecosystem",
      "timedOut": false,
      "duration": 368,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c80c8905-25d4-44db-863e-a5d7286f5f42",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the ecosystem exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the ecosystem exists",
      "timedOut": false,
      "duration": 304,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.info(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Ecosystem exists');\n    assert.equal(value.body.id, ecosystemId, 'Ecosystem ID matches the created ecosystem ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "176c94aa-046b-4784-8032-f33485cdcb76",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create an environment",
      "timedOut": false,
      "duration": 295,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8799c404-3253-4276-83ae-c8d42122b109",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the environment exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the environment exists",
      "timedOut": false,
      "duration": 422,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.info(environmentId).then(function (value) {\n    assert.equal(value.status, 200, 'Environment exists');\n    assert.equal(value.body.id, environmentId, 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "083dc9e7-570d-43d1-8e4f-84801ba4388e",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a virtual device",
      "timedOut": false,
      "duration": 328,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "828c2342-fcf4-4cda-987c-b64eec550ad9",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the device exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the device exists",
      "timedOut": false,
      "duration": 279,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.equal(value.body.id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "45ebc28f-aaf7-41d5-a2ff-034b4df182e6",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Set a service property on a virtual device",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on a virtual device",
      "timedOut": false,
      "duration": 419,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the device');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a831d904-cff8-418e-ad8b-ab07ceb2c3c2",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the property value has changed",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property value has changed",
      "timedOut": false,
      "duration": 306,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[0], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Service property exists on device 1');\n    assert.equal(value.body.items[0].value, 'on', 'Service property value on the device successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d00bd265-6a26-423b-885d-8ddce949b3c6",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Update the device record",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Update the device record",
      "timedOut": false,
      "duration": 369,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4ce1b3aa-db80-434e-8b1a-b7d3718c42ea",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the record has been updated",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the record has been updated",
      "timedOut": false,
      "duration": 299,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.info(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device 1 exists');\n    assert.equal(value.body.meta.$label, 'New Label', 'Device record successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ef1b1bc9-e0f7-4862-9584-844bd1c2d00a",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create and add a second device to the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create and add a second device to the environment",
      "timedOut": false,
      "duration": 307,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8126d69a-29d6-4cf2-94a2-f4868ed8817a",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Set a service property on the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the environment",
      "timedOut": false,
      "duration": 676,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.setServiceProperty(environmentId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the environment');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "da4da1d5-e647-4a94-bbcd-7e6120692a63",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the property has been set on both devices",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the property has been set on both devices",
      "timedOut": false,
      "duration": 5002,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists on device' + (index + 1));\n        assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device' + (index + 1));\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 2, 'Both devices successfully checked');\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "5cafca90-8bcc-462c-bae2-1855ebd1622e",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create a third device in the environment",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a third device in the environment",
      "timedOut": false,
      "duration": 308,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[2] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1bc10953-5bae-4c0c-9954-fbb8e14034eb",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Create a zone",
      "timedOut": false,
      "duration": 276,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "6e565a6f-d4b4-449c-aabc-466334556cfa",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that the zone exists",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that the zone exists",
      "timedOut": false,
      "duration": 264,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.info(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.id, zoneId, 'Zone ID matches the created zone ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cbed2ed7-1ad0-4ec6-87fc-836097f0fe4b",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone, add the second device to the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Add the first device to the zone, add the second device to the zone",
      "timedOut": false,
      "duration": 5008,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesAdded = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    if (index === 2) {\n        return;\n    }\n    droplit.zones.addItem(zoneId, deviceId).then(function (value) {\n        assert.equal(value.status, 201, 'Device ' + (index + 1) + ' successfully added to the zone');\n        devicesAdded++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesAdded, 2, 'Both devices successfully added to the zone');\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "be11f387-a61e-43c5-b7c8-1dc138e09d1b",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that both devices and no others are in the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that both devices and no others are in the zone",
      "timedOut": false,
      "duration": 265,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.listItems(zoneId).then(function (value) {\n    assert.equal(value.status, 200, 'Zone exists');\n    assert.equal(value.body.items.length, 2, 'Zone contains 2 items');\n    deviceIds.forEach(function (deviceId, index) {\n        if (index === 2) {\n            return;\n        }\n        assert.equal(value.body.items.some(function (item) {\n            return item.itemId === deviceId;\n        }), true, 'Zone contains device ' + (index + 1));\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "81eb27cf-0993-44b5-ba27-662d6b3a57ac",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Set a service property on the zone",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Set a service property on the zone",
      "timedOut": false,
      "duration": 584,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.zones.setServiceProperty(zoneId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set on the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "42608617-bd08-484b-a586-1d255352dfe6",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Verify that device 1 and 2 have the property set, but not device 3",
      "fullTitle": "Ecosystems, Environments, Devices, and Zones Verify that device 1 and 2 have the property set, but not device 3",
      "timedOut": false,
      "duration": 5003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var devicesChecked = 0;\ndeviceIds.forEach(function (deviceId, index) {\n    droplit.devices.getServiceProperty(deviceId, 'BinarySwitch.switch', 'false').then(function (value) {\n        assert.equal(value.status, 200, 'Service property exists');\n        if (index === 2) {\n            assert.equal(value.body.items.length, 0, 'Service property not set on device 3');\n        }\n        else {\n            assert.equal(value.body.items[0].value, 'on', 'Service property successfully set on device ' + (index + 1));\n        }\n        devicesChecked++;\n    }).catch(function (error) {\n        done(error);\n    });\n});\nsetTimeout(function () {\n    assert.equal(devicesChecked, 3, 'All devices successfully checked');\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "9bdff961-c9e9-475a-8845-da8e23e4de14",
      "parentUUID": "e8458993-570a-4371-adfd-0fb4c4eea9ab",
      "skipped": false
    },
    {
      "title": "Setup webhook",
      "fullTitle": "Edge Device, Websockets, and Webhooks Setup webhook",
      "timedOut": false,
      "duration": 188,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.create(ecosystemId, webhookUrl).then(function (value) {\n    assert.equal(value.status, 201, 'Webhook successfully created');\n    webhookId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f4468111-3bef-4532-8d39-5b5d03049943",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Verify webhook is valid",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify webhook is valid",
      "timedOut": false,
      "duration": 739,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.webhooks.invokeWebhook(webhookId).then(function (value) {\n    assert.equal(value.status, 200, 'Webhook verified');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cd79f750-a7da-456f-bc8e-7b9e6c6bcba6",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Get the environment from the running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Get the environment from the running edge server",
      "timedOut": false,
      "duration": 277,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'There is at least one environment');\n    environmentId = value.body.items[0].id;\n    droplitClient.subscribe(environmentId);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b2895113-a647-453e-9aed-a5cd5e0cac8a",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Identify devices that have been created by running edge server",
      "fullTitle": "Edge Device, Websockets, and Webhooks Identify devices that have been created by running edge server",
      "timedOut": false,
      "duration": 401,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.list(environmentId).then(function (value) {\n    assert.notEqual(value.body.items.length, 0, 'Edge server has detected devices');\n    value.body.items.forEach(function (item, index) {\n        deviceIds[index] = item.id;\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "cefe2771-8533-477d-8c62-a70f20c0b67c",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Set a property on a device",
      "fullTitle": "Edge Device, Websockets, and Webhooks Set a property on a device",
      "timedOut": false,
      "duration": 276,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "356b593e-342e-48e4-a39f-f9a4e9c612a8",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Verify the property has been set using refresh = false",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = false",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'false').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c7c0c3c9-a161-493b-ba30-e14bcffb8af2",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Test set and changed messages",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test set and changed messages",
      "timedOut": false,
      "duration": 5030,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketSet = false;\nvar websocketChanged = false;\nvar webhookSet = false;\nvar webhookChanged = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'set':\n            websocketSet = true;\n            break;\n        case 'changed':\n            websocketChanged = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 1:\n            webhookSet = true;\n            break;\n        case 4:\n            webhookChanged = true;\n            break;\n    }\n};\ndroplit.devices.setServiceProperty(deviceIds[1], 'BinarySwitch.switch', {\n    value: 'on'\n});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketSet, 'Set message recieved from websocket');\n        assert.ok(websocketChanged, 'Changed message recieved from websocket');\n        assert.ok(webhookSet, 'Set message received from webhook');\n        assert.ok(webhookChanged, 'Changed message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "ca49c802-9994-49f1-8e45-400c85d109bc",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Test service methods and events",
      "fullTitle": "Edge Device, Websockets, and Webhooks Test service methods and events",
      "timedOut": false,
      "duration": 5003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var websocketCall = false;\nvar websocketEvent = false;\nvar webhookCall = false;\nvar webhookEvent = false;\ndroplitClient.on('event', function (data) {\n    if (data.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (data.type) {\n        case 'call':\n            websocketCall = true;\n            break;\n        case 'event':\n            websocketEvent = true;\n            break;\n    }\n});\ncallback = function (body) {\n    body = JSON.parse(body);\n    if (body.deviceId !== deviceIds[1]) {\n        return;\n    }\n    switch (body.type) {\n        case 2:\n            webhookCall = true;\n            break;\n        case 3:\n            webhookEvent = true;\n            break;\n    }\n};\ndroplit.devices.callServiceMethod(deviceIds[1], 'Test.doStuff', {});\nsetTimeout(function () {\n    droplitClient.removeAllListeners('event');\n    callback = function (body) {\n    };\n    try {\n        assert.ok(websocketCall, 'Call message recieved from websocket');\n        assert.ok(websocketEvent, 'Event message recieved from websocket');\n        assert.ok(webhookCall, 'Call message received from webhook');\n        assert.ok(webhookEvent, 'Event message received from webhook');\n    }\n    catch (error) {\n        done(error);\n        return;\n    }\n    done();\n}, 5000);",
      "err": {},
      "isRoot": false,
      "uuid": "334390f2-c4b3-4416-83ac-93223d197725",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "History Create an ecosystem",
      "timedOut": false,
      "duration": 285,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f3938036-b203-4af4-8569-0e83e7548057",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "History Create an environment",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "58eb142d-269c-43d8-ab53-f9275e1bd858",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Create a virtual device",
      "fullTitle": "History Create a virtual device",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentId }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1bb4213f-5681-45d9-9c7b-9ff97c331768",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 324,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b0f442f4-f355-42f7-a8dd-22b14c2ac293",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Turn a service property on",
      "fullTitle": "History Turn a service property on",
      "timedOut": false,
      "duration": 416,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceId, 'BinarySwitch.switch', {\n    value: 'off'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "9cdbec1f-069e-4e91-a82a-899f0a56974d",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Call a service method on the device",
      "fullTitle": "History Call a service method on the device",
      "timedOut": false,
      "duration": 306,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.callServiceMethod(deviceId, 'BinarySwitch.switchOn', {}).then(function (value) {\n    assert.equal(value.status, 200, 'Service method successfully called');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "987deead-7b51-4e3a-aae7-dc0ec2b212a4",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Verify device history is correct",
      "fullTitle": "History Verify device history is correct",
      "timedOut": false,
      "duration": 309,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.history(deviceId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Device history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1323ca90-fab3-42ec-b1c7-c1efe5a3b5a3",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Verify environment history is correct",
      "fullTitle": "History Verify environment history is correct",
      "timedOut": false,
      "duration": 321,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.history(environmentId, '').then(function (value) {\n    assert.equal(value.status, 200, 'Environment history successfully retrieved');\n    assert.equal(value.body.items.length, 3, 'Exactly three events found in history');\n    value.body.items.forEach(function (item, index) {\n        switch (index) {\n            case 0:\n                assert.equal(item.type, 'call', 'Call event found in history');\n                break;\n            case 1:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'off', 'Set off event found in history');\n                break;\n            case 2:\n                assert.equal(item.type, 'set', 'Set event found in history');\n                assert.equal(item.value, 'on', 'Set on event found in history');\n                break;\n        }\n    });\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5654aa5b-2b4f-4e82-aefe-ba29f1f05fdc",
      "parentUUID": "89ab8cdc-d416-48c2-9a66-2cf4aa399ebd",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Users Create an ecosystem",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "44dd6e50-c77b-4ef1-b1cd-cf9b2adc0192",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create an environment",
      "fullTitle": "Users Create an environment",
      "timedOut": false,
      "duration": 288,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "be9d5d7f-893a-4aa1-bbed-0be6512485e1",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create another environment",
      "fullTitle": "Users Create another environment",
      "timedOut": false,
      "duration": 258,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.environments.create({ ecosystemId: ecosystemId }).then(function (value) {\n    assert.equal(value.status, 201, 'Environment successfully created');\n    assert.ok(value.body.id, 'Environment has an ID');\n    environmentIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ea80529f-e77a-44dd-a52d-e0f7635a21e6",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the first environment",
      "fullTitle": "Users Create a virtual device in the first environment",
      "timedOut": false,
      "duration": 284,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[0] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "308ab27e-3034-4b2d-9b9d-3887fdbe527a",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a virtual device in the second environment",
      "fullTitle": "Users Create a virtual device in the second environment",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.devices.create({ environmentId: environmentIds[1] }).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully created');\n    assert.ok(value.body.id, 'Device has an ID');\n    deviceIds[1] = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c9bda3e6-4ed2-47fa-aa0e-6cf48de8c853",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a user and grant access to the first environment",
      "fullTitle": "Users Create a user and grant access to the first environment",
      "timedOut": false,
      "duration": 275,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "userId = ecosystemId + ';testUser';\ndroplit.users.update(userId, {\n    access: [\n        {\n            environmentId: environmentIds[0],\n            accessLevel: 'Full'\n        }\n    ],\n    email: 'test@test.com',\n    meta: {\n        $label: 'Test User'\n    }\n}, '?generateToken=true').then(function (value) {\n    assert.equal(value.status, 201, 'User successfully created');\n    assert.ok(value.body.token, 'User has a token');\n    droplit.setAuthorization(value.body.token);\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "791dd5c8-d5fa-4b20-beed-8afc8212c6c3",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to list ecosystems",
      "fullTitle": "Users Fail to list ecosystems",
      "timedOut": false,
      "duration": 267,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.list().then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "dcbd298d-f3bc-4a99-8f34-72b1b3964309",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to delete the ecosystem",
      "fullTitle": "Users Fail to delete the ecosystem",
      "timedOut": false,
      "duration": 263,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.deleteEcosystem(ecosystemId).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "4210794b-dfd7-48f8-8295-b702dce857b7",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Clients Create an ecosystem",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "e52ceec2-737c-408b-a402-dadc758fe5cf",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Create a client",
      "fullTitle": "Clients Create a client",
      "timedOut": false,
      "duration": 560,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.create(ecosystemId, 'application').then(function (value) {\n    assert.equal(value.status, 201, 'Client successfully created');\n    clientId = value.body.id;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "09eb3631-5afd-4dff-b6b2-758dd1d765c6",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the client exists",
      "fullTitle": "Clients Verify the client exists",
      "timedOut": false,
      "duration": 278,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "674945c4-6da1-409d-9413-2718b108a037",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Update the client info",
      "fullTitle": "Clients Update the client info",
      "timedOut": false,
      "duration": 264,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.update(clientId, {\n    name: 'Test Client'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Client info successfully updated');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "556142e7-5b0d-4a79-82cc-a03fc0fe836e",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the client info has been updated",
      "fullTitle": "Clients Verify the client info has been updated",
      "timedOut": false,
      "duration": 262,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.clients.info(clientId).then(function (value) {\n    assert.equal(value.status, 200, 'Client exists');\n    assert.equal(value.body.name, 'Test Client', 'Client info successfully changed');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "a1e2e6dc-9573-4dea-974a-970c7b06ba1b",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Create a client token",
      "fullTitle": "Clients Create a client token",
      "timedOut": false,
      "duration": 271,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.create(clientId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully created');\n    tokenId = value.body.id;\n    token = value.body.token;\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "80a9df67-0d45-4a5d-8208-01ba7f8ab2c8",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the token exists",
      "fullTitle": "Clients Verify the token exists",
      "timedOut": false,
      "duration": 279,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "d4090a55-37ff-4416-b0bb-3e5bca971668",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Update the token record",
      "fullTitle": "Clients Update the token record",
      "timedOut": false,
      "duration": 584,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.updateToken(clientId, tokenId, {\n    description: 'Primary access token'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Token record successfully updated');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "fda234e0-fa5d-414c-8461-f6bb2f79c32d",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Verify the token record has been updated",
      "fullTitle": "Clients Verify the token record has been updated",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.info(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 200, 'Token exists');\n    assert.equal(value.body.description, 'Primary access token', 'Token record successfully changed');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "b1c13a11-5699-4703-8e3c-eb5e0fd89166",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Regenerate the client token and verify it is different",
      "fullTitle": "Clients Regenerate the client token and verify it is different",
      "timedOut": false,
      "duration": 261,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.tokens.regenerateToken(clientId, tokenId).then(function (value) {\n    assert.equal(value.status, 201, 'Token successfully regenerated');\n    assert.notEqual(value.body.token, token, 'Token successfully changed');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "7f5113ba-67d9-4a0a-9309-1681ed372fad",
      "parentUUID": "af207ece-a6ca-477a-ae9b-afa97fa93da8",
      "skipped": false
    },
    {
      "title": "Create an ecosystem",
      "fullTitle": "Service classes Create an ecosystem",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.ecosystems.create().then(function (value) {\n    assert.equal(value.status, 201, 'Ecosystem successfully created');\n    assert.ok(value.body.id, 'Ecosystem has an ID');\n    ecosystemId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "31b37074-7bc4-484d-adb6-d59509230129",
      "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
      "skipped": false
    },
    {
      "title": "Create a new service class",
      "fullTitle": "Service classes Create a new service class",
      "timedOut": false,
      "duration": 269,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.create(ecosystemId, 'Test').then(function (value) {\n    assert.equal(value.status, 201, 'Service class successfully created');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "48e70abd-d5fa-468f-a252-b88643ebbd4b",
      "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
      "skipped": false
    },
    {
      "title": "Verify the service class exists",
      "fullTitle": "Service classes Verify the service class exists",
      "timedOut": false,
      "duration": 576,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "droplit.serviceClasses.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Service classes successfully listed');\n    assert.equal(value.body.items.length, 1, 'Exactly one service class exists');\n    assert.equal(value.body.items[0].name, 'Test', 'Service class name matches the created service class name');\n    done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "36abd0da-a35c-4921-9f44-6a076d4f77bc",
      "parentUUID": "d3cbb182-2b88-4794-8620-c3a5c4824d6d",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "Verify the property has been set using refresh = true",
      "fullTitle": "Edge Device, Websockets, and Webhooks Verify the property has been set using refresh = true",
      "timedOut": true,
      "duration": 10001,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.getServiceProperty(deviceIds[1], 'BinarySwitch.switch', 'true').then(function (value) {\n    assert.equal(value.status, 200, 'Device exists');\n    assert.notEqual(value.body.items.length, 0, 'A service property exists on the device');\n    assert.equal(value.body.items[0].value, 'on', 'Service property successfully changed');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "estack": "Error: Timeout of 10000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "e34fa40d-acdb-48b0-b1db-8c8706d52d75",
      "parentUUID": "f6a584b7-2019-4ff0-a15d-ffd5873f8dcd",
      "skipped": false
    },
    {
      "title": "List environments",
      "fullTitle": "Users List environments",
      "timedOut": false,
      "duration": 370,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.list(ecosystemId).then(function (value) {\n    assert.equal(value.status, 200, 'Environments successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one environment listed');\n    assert.equal(value.body.items[0].id, environmentIds[0], 'Environment ID matches the created environment ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "500",
        "expected": "200",
        "operator": "==",
        "message": "Environments successfully retrieved",
        "generatedMessage": false,
        "estack": "AssertionError: Environments successfully retrieved\n    at projects\\test\\lib\\test.js:704:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 500\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "06f80473-3c21-4ab3-aa19-428651601106",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "List devices",
      "fullTitle": "Users List devices",
      "timedOut": false,
      "duration": 258,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Devices successfully retrieved');\n    assert.equal(value.body.items.length, 1, 'Exactly one device listed');\n    assert.equal(value.body.items[0].id, deviceIds[0], 'Device ID matches the created device ID');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Devices successfully retrieved",
        "generatedMessage": false,
        "estack": "AssertionError: Devices successfully retrieved\n    at projects\\test\\lib\\test.js:714:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "1aea74ea-c333-4435-b5a0-da85c4f39c05",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to list devices in the second environment",
      "fullTitle": "Users Fail to list devices in the second environment",
      "timedOut": false,
      "duration": 274,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.list(environmentIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": null,
        "expected": "Token type not permitted!",
        "operator": "==",
        "message": "User does not have access",
        "generatedMessage": false,
        "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:724:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "d8639c63-c9dc-4954-bfea-20c51153eebf",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Set device service property",
      "fullTitle": "Users Set device service property",
      "timedOut": false,
      "duration": 282,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.setServiceProperty(deviceIds[0], 'BinarySwitch.switch', {\n    value: 'on'\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Service property successfully set');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Service property successfully set",
        "generatedMessage": false,
        "estack": "AssertionError: Service property successfully set\n    at projects\\test\\lib\\test.js:734:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "fe2356df-51a2-44f0-9fd6-110c27c14b9d",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Update device record",
      "fullTitle": "Users Update device record",
      "timedOut": false,
      "duration": 247,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.update(deviceIds[0], {\n    meta: {\n        $label: 'New Label'\n    }\n}).then(function (value) {\n    assert.equal(value.status, 200, 'Device record successfully updated');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Device record successfully updated",
        "generatedMessage": false,
        "estack": "AssertionError: Device record successfully updated\n    at projects\\test\\lib\\test.js:746:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "c4e6c872-2a97-45f2-82a9-584bef0aff17",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Create a zone",
      "fullTitle": "Users Create a zone",
      "timedOut": false,
      "duration": 260,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.create({ environmentId: environmentIds[0] }).then(function (value) {\n    assert.equal(value.status, 201, 'Zone successfully created');\n    assert.ok(value.body.id, 'Zone has an ID');\n    zoneId = value.body.id;\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "201",
        "operator": "==",
        "message": "Zone successfully created",
        "generatedMessage": false,
        "estack": "AssertionError: Zone successfully created\n    at projects\\test\\lib\\test.js:754:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 201\n"
      },
      "isRoot": false,
      "uuid": "e1dbb68b-189e-4f2d-ba7f-82e634f4c956",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Add the first device to the zone",
      "fullTitle": "Users Add the first device to the zone",
      "timedOut": false,
      "duration": 261,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 201, 'Device successfully added to the zone');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "400",
        "expected": "201",
        "operator": "==",
        "message": "Device successfully added to the zone",
        "generatedMessage": false,
        "estack": "AssertionError: Device successfully added to the zone\n    at projects\\test\\lib\\test.js:764:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 400\n+ 201\n"
      },
      "isRoot": false,
      "uuid": "853d3ce1-9f34-4e19-af0e-80121ce05e3f",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Fail to add the second device to the zone",
      "fullTitle": "Users Fail to add the second device to the zone",
      "timedOut": false,
      "duration": 388,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.zones.addItem(zoneId, deviceIds[1]).then(function (value) {\n    assert.equal(value.body, 'Token type not permitted!', 'User does not have access');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": {
          "errorType": "InvalidParams",
          "errors": [
            {
              "in": "path",
              "message": "invalid id",
              "path": "id"
            }
          ]
        },
        "expected": "Token type not permitted!",
        "operator": "==",
        "message": "User does not have access",
        "generatedMessage": false,
        "estack": "AssertionError: User does not have access\n    at projects\\test\\lib\\test.js:772:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)"
      },
      "isRoot": false,
      "uuid": "91b9b332-4bdc-4163-98ee-208bfd8c0cdc",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Delete the first device",
      "fullTitle": "Users Delete the first device",
      "timedOut": false,
      "duration": 279,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.devices.delete(deviceIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Device successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Device successfully deleted",
        "generatedMessage": false,
        "estack": "AssertionError: Device successfully deleted\n    at projects\\test\\lib\\test.js:788:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "45ff2fbf-c116-441f-a9a5-626a58eaff20",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    },
    {
      "title": "Delete the first environment",
      "fullTitle": "Users Delete the first environment",
      "timedOut": false,
      "duration": 275,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "droplit.environments.deleteEnvironment(environmentIds[0]).then(function (value) {\n    assert.equal(value.status, 200, 'Environment successfully deleted');\n    done();\n}).catch(function (error) {\n    done(error);\n});",
      "err": {
        "name": "AssertionError",
        "actual": "403",
        "expected": "200",
        "operator": "==",
        "message": "Environment successfully deleted",
        "generatedMessage": false,
        "estack": "AssertionError: Environment successfully deleted\n    at projects\\test\\lib\\test.js:796:20\n    at process._tickCallback (internal/process/next_tick.js:109:7)",
        "diff": "- 403\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "c9afaef1-c473-4583-9a12-ffe25327498c",
      "parentUUID": "42f633cb-57b5-4a30-9ae4-d1945a4316bb",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}